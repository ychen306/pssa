; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=test-vector-codegen,jump-threading,simplifycfg -find-conditional-deps -p s.1,s.1.1 | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

define i32 @foo(ptr %b, ptr %c, i1 %cmp1) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[UGLYGEP:%.*]] = getelementptr i8, ptr [[B:%.*]], i64 4
; CHECK-NEXT:    [[IDENT_CHECK:%.*]] = icmp ult ptr [[UGLYGEP]], [[C:%.*]]
; CHECK-NEXT:    [[UGLYGEP4:%.*]] = getelementptr i8, ptr [[C]], i64 4
; CHECK-NEXT:    [[IDENT_CHECK5:%.*]] = icmp ult ptr [[UGLYGEP4]], [[B]]
; CHECK-NEXT:    [[TMP0:%.*]] = or i1 [[IDENT_CHECK]], [[IDENT_CHECK5]]
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[DOTTHREAD19:%.*]]
; CHECK:       .thread19:
; CHECK-NEXT:    [[SPEC_SELECT:%.*]] = select i1 [[CMP1:%.*]], i32 1, i32 0
; CHECK-NEXT:    [[SPEC_SELECT45:%.*]] = select i1 [[CMP1]], i32 1, i32 0
; CHECK-NEXT:    store i32 [[SPEC_SELECT]], ptr [[B]], align 4
; CHECK-NEXT:    [[I_1_CLONE:%.*]] = load i32, ptr [[C]], align 4
; CHECK-NEXT:    [[CMP1_1_CLONE:%.*]] = icmp sgt i32 [[I_1_CLONE]], 0
; CHECK-NEXT:    [[SPEC_SELECT48:%.*]] = select i1 [[CMP1_1_CLONE]], i32 0, i32 [[SPEC_SELECT]]
; CHECK-NEXT:    br label [[TMP10:%.*]]
; CHECK:       1:
; CHECK-NEXT:    [[I_1:%.*]] = load i32, ptr [[C]], align 4
; CHECK-NEXT:    [[CMP1_1:%.*]] = icmp sgt i32 [[I_1]], 0
; CHECK-NEXT:    br i1 [[CMP1_1]], label [[TMP2:%.*]], label [[DOTTHREAD26:%.*]]
; CHECK:       .thread26:
; CHECK-NEXT:    [[SPEC_SELECT46:%.*]] = select i1 [[CMP1]], i32 1, i32 0
; CHECK-NEXT:    [[SPEC_SELECT47:%.*]] = select i1 [[CMP1]], i32 1, i32 0
; CHECK-NEXT:    store i32 [[SPEC_SELECT47]], ptr [[B]], align 4
; CHECK-NEXT:    br label [[TMP10]]
; CHECK:       2:
; CHECK-NEXT:    [[CMP1_1_MEM_01823:%.*]] = phi i1 [ [[CMP1_1]], [[TMP1]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <2 x i1> undef, i1 [[CMP1]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i1> [[TMP3]], i1 [[CMP1_1_MEM_01823]], i64 1
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x i1> undef, i1 [[CMP1]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <2 x i1> [[TMP5]], i1 [[CMP1_1_MEM_01823]], i64 1
; CHECK-NEXT:    [[TMP7:%.*]] = xor <2 x i1> [[TMP6]], <i1 true, i1 true>
; CHECK-NEXT:    [[S_1_1_VEC:%.*]] = select <2 x i1> [[TMP4]], <2 x i32> <i32 1, i32 0>, <2 x i32> <i32 0, i32 undef>
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i32> [[S_1_1_VEC]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <2 x i32> [[S_1_1_VEC]], i64 1
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[B]], align 4
; CHECK-NEXT:    br label [[TMP10]]
; CHECK:       10:
; CHECK-NEXT:    [[S_1_1_VER_DEMOTED_0:%.*]] = phi i32 [ [[TMP9]], [[TMP2]] ], [ [[SPEC_SELECT46]], [[DOTTHREAD26]] ], [ [[SPEC_SELECT48]], [[DOTTHREAD19]] ]
; CHECK-NEXT:    ret i32 [[S_1_1_VER_DEMOTED_0]]
;
for.body:
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %s.1 = phi i32 [ 1, %if.then ], [ 0, %for.body ]
  store i32 %s.1, ptr %b, align 4
  br label %for.body.1

for.body.1:                                       ; preds = %if.end
  %i.1 = load i32, ptr %c, align 4
  %cmp1.1 = icmp sgt i32 %i.1, 0
  br i1 %cmp1.1, label %if.then.1, label %if.end.1

if.then.1:                                        ; preds = %for.body.1
  br label %if.end.1

if.end.1:                                         ; preds = %if.then.1, %for.body.1
  %s.1.1 = phi i32 [ 0, %if.then.1 ], [ %s.1, %for.body.1 ]
  ret i32 %s.1.1
}
