; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=test-vector-codegen,adce,simplifycfg,sink -find-conditional-deps -p storeOf:i1,storeOf:i3,storeOf:i5,storeOf:i7 -p cmp1,cmp1.1,cmp1.2,cmp1.3 -p i1,i3,i5,i7 -p i,i2,i4,i6 | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@a = external local_unnamed_addr global [0 x i32], align 4
@b = external local_unnamed_addr global [0 x i32], align 4

; Function Attrs: nofree norecurse nosync nounwind ssp uwtable
define void @foo() local_unnamed_addr #0 {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I2_VEC:%.*]] = load <4 x i32>, ptr @a, align 4
; CHECK-NEXT:    [[CMP1_1_VEC:%.*]] = icmp slt <4 x i32> [[I2_VEC]], zeroinitializer
; CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <4 x i1> [[CMP1_1_VEC]], <4 x i1> undef, <3 x i32> <i32 0, i32 1, i32 2>
; CHECK-NEXT:    [[TMP1:%.*]] = call i1 @llvm.vector.reduce.or.v3i1(<3 x i1> [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = xor i1 [[TMP1]], true
; CHECK-NEXT:    br i1 [[TMP2]], label [[TMP4:%.*]], label [[TMP5:%.*]]
; CHECK:       3:
; CHECK-NEXT:    [[I1_CLONE:%.*]] = load i32, ptr @b, align 4, !tbaa [[TBAA5:![0-9]+]]
; CHECK-NEXT:    store i32 [[I1_CLONE]], ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 1), align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    br label [[TMP8:%.*]]
; CHECK:       4:
; CHECK-NEXT:    [[I3_VEC:%.*]] = call <4 x i32> @llvm.masked.load.v4i32.p0(ptr @b, i32 4, <4 x i1> [[CMP1_1_VEC]], <4 x i32> undef)
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0(<4 x i32> [[I3_VEC]], ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 1), i32 4, <4 x i1> [[CMP1_1_VEC]])
; CHECK-NEXT:    br label [[TMP16:%.*]]
; CHECK:       5:
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <4 x i1> [[CMP1_1_VEC]], i64 0
; CHECK-NEXT:    br i1 [[TMP6]], label [[TMP3:%.*]], label [[TMP8]]
; CHECK:       7:
; CHECK-NEXT:    [[I3_CLONE:%.*]] = load i32, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 1), align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    store i32 [[I3_CLONE]], ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 2), align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    br label [[TMP11:%.*]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <4 x i1> [[CMP1_1_VEC]], i64 1
; CHECK-NEXT:    br i1 [[TMP9]], label [[TMP7:%.*]], label [[TMP11]]
; CHECK:       10:
; CHECK-NEXT:    [[I5_CLONE:%.*]] = load i32, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 2), align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    store i32 [[I5_CLONE]], ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 3), align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    br label [[TMP14:%.*]]
; CHECK:       11:
; CHECK-NEXT:    [[TMP12:%.*]] = extractelement <4 x i1> [[CMP1_1_VEC]], i64 2
; CHECK-NEXT:    br i1 [[TMP12]], label [[TMP10:%.*]], label [[TMP14]]
; CHECK:       13:
; CHECK-NEXT:    [[I7_CLONE:%.*]] = load i32, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 3), align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    store i32 [[I7_CLONE]], ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 4), align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    br label [[TMP16]]
; CHECK:       14:
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <4 x i1> [[CMP1_1_VEC]], i64 3
; CHECK-NEXT:    br i1 [[TMP15]], label [[TMP13:%.*]], label [[TMP16]]
; CHECK:       16:
; CHECK-NEXT:    ret void
;
entry:
  %i = load i32, ptr @a, align 4, !tbaa !5
  %cmp1 = icmp slt i32 %i, 0
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %entry
  %i1 = load i32, ptr @b, align 4, !tbaa !5
  store i32 %i1, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 1), align 4, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %if.then, %entry
  %i2 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @a, i64 0, i64 1), align 4, !tbaa !5
  %cmp1.1 = icmp slt i32 %i2, 0
  br i1 %cmp1.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %i3 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 1), align 4, !tbaa !5
  store i32 %i3, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 2), align 4, !tbaa !5
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %i4 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @a, i64 0, i64 2), align 4, !tbaa !5
  %cmp1.2 = icmp slt i32 %i4, 0
  br i1 %cmp1.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %i5 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 2), align 4, !tbaa !5
  store i32 %i5, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 3), align 4, !tbaa !5
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %i6 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @a, i64 0, i64 3), align 4, !tbaa !5
  %cmp1.3 = icmp slt i32 %i6, 0
  br i1 %cmp1.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %i7 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 3), align 4, !tbaa !5
  store i32 %i7, ptr getelementptr inbounds ([0 x i32], ptr @b, i64 0, i64 4), align 4, !tbaa !5
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  ret void
}

attributes #0 = { nofree norecurse nosync nounwind ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 12f9c7b27063a4a487621f48c167e4f88de6d297)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
