; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=test-vector-codegen,simplifycfg -find-conditional-deps -p i1,i1.1 -S | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

define void @foo(ptr %b, ptr %c) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP1:%.*]] = icmp sgt i32 0, 0
; CHECK-NEXT:    [[UGLYGEP:%.*]] = getelementptr i8, ptr [[C:%.*]], i64 4
; CHECK-NEXT:    [[IDENT_CHECK:%.*]] = icmp ult ptr [[UGLYGEP]], [[B:%.*]]
; CHECK-NEXT:    [[UGLYGEP1:%.*]] = getelementptr i8, ptr [[B]], i64 4
; CHECK-NEXT:    [[IDENT_CHECK2:%.*]] = icmp ult ptr [[UGLYGEP1]], [[C]]
; CHECK-NEXT:    [[TMP0:%.*]] = or i1 [[IDENT_CHECK]], [[IDENT_CHECK2]]
; CHECK-NEXT:    [[DOT:%.*]] = select i1 [[CMP1]], i1 false, i1 true
; CHECK-NEXT:    [[TMP1:%.*]] = and i1 [[TMP0]], [[DOT]]
; CHECK-NEXT:    br i1 [[TMP1]], label [[TMP4:%.*]], label [[TMP3:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[I1_CLONE:%.*]] = load i32, ptr [[C]], align 4
; CHECK-NEXT:    br label [[TMP9:%.*]]
; CHECK:       3:
; CHECK-NEXT:    br i1 [[CMP1]], label [[TMP2:%.*]], label [[TMP9]]
; CHECK:       4:
; CHECK-NEXT:    store i32 0, ptr [[B]], align 4
; CHECK-NEXT:    [[I_1:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    [[CMP1_1:%.*]] = icmp sgt i32 [[I_1]], 0
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x ptr> undef, ptr [[C]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <2 x ptr> [[TMP5]], ptr [[B]], i64 1
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x i1> undef, i1 [[CMP1]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x i1> [[TMP7]], i1 [[CMP1_1]], i64 1
; CHECK-NEXT:    [[I1_1_VEC:%.*]] = call <2 x i32> @llvm.masked.gather.v2i32.v2p0(<2 x ptr> [[TMP6]], i32 4, <2 x i1> [[TMP8]], <2 x i32> undef)
; CHECK-NEXT:    br label [[TMP11:%.*]]
; CHECK:       9:
; CHECK-NEXT:    [[S_1_CLONE_DEMOTED_0:%.*]] = phi i32 [ [[I1_CLONE]], [[TMP2]] ], [ 0, [[TMP3]] ]
; CHECK-NEXT:    store i32 [[S_1_CLONE_DEMOTED_0]], ptr [[B]], align 4
; CHECK-NEXT:    [[I_1_CLONE:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    [[CMP1_1_CLONE:%.*]] = icmp sgt i32 [[I_1_CLONE]], 0
; CHECK-NEXT:    br i1 [[CMP1_1_CLONE]], label [[TMP10:%.*]], label [[TMP11]]
; CHECK:       10:
; CHECK-NEXT:    [[I1_1_CLONE:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    br label [[TMP11]]
; CHECK:       11:
; CHECK-NEXT:    ret void
;
for.body:
  %cmp1 = icmp sgt i32 0, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %i1 = load i32, ptr %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %s.1 = phi i32 [ %i1, %if.then ], [ 0, %for.body ]
  store i32 %s.1, ptr %b, align 4
  br label %for.body.1

for.body.1:                                       ; preds = %if.end
  %i.1 = load i32, ptr %b, align 4
  %cmp1.1 = icmp sgt i32 %i.1, 0
  br i1 %cmp1.1, label %if.then.1, label %if.end.1

if.then.1:                                        ; preds = %for.body.1
  %i1.1 = load i32, ptr %b, align 4
  br label %if.end.1

if.end.1:                                         ; preds = %if.then.1, %for.body.1
  ret void
}
