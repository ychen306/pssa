; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=test-vector-codegen -find-conditional-deps -p i,i1 | FileCheck %s
; ModuleID = 'reduced2.ll'
source_filename = "reduced2.ll"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@a = external global [0 x i16]
@b = external global i16

define void @d(ptr %arg) {
; CHECK-LABEL: @d(
; CHECK-NEXT:  entry:
; CHECK:    [[ARRAYIDX:%.*]] = getelementptr inbounds i16, ptr [[ARG:%.*]], i64 -1
; CHECK:    br i1 [[TMP2:%.*]], label [[TMP3:%.*]], label [[TMP8:%.*]]
; CHECK:       3:
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x ptr> undef, ptr [[ARRAYIDX]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x ptr> [[TMP4]], ptr [[ARRAYIDX]], i64 1
; CHECK-NEXT:    [[I1_VEC:%.*]] = call <2 x i16> @llvm.masked.gather.v2i16.v2p0(<2 x ptr> [[TMP5]], i32 2, <2 x i1> <i1 true, i1 true>, <2 x i16> undef)
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x i16> [[I1_VEC]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x i16> [[I1_VEC]], i64 1
; CHECK-NEXT:    store i16 [[TMP6]], ptr @a, align 2
; CHECK-NEXT:    store i16 0, ptr @b, align 2
; CHECK-NEXT:    br label [[TMP9:%.*]]
; CHECK:       8:
; CHECK-NEXT:    [[I_CLONE:%.*]] = load i16, ptr [[ARRAYIDX]], align 2
; CHECK-NEXT:    store i16 [[I_CLONE]], ptr @a, align 2
; CHECK-NEXT:    store i16 0, ptr @b, align 2
; CHECK-NEXT:    [[I1_CLONE:%.*]] = load i16, ptr [[ARRAYIDX]], align 2
; CHECK-NEXT:    br label [[TMP9]]
; CHECK:       9:
; CHECK-NEXT:    [[I1_VER_DEMOTED_0:%.*]] = phi i16 [ [[TMP7]], [[TMP3]] ], [ [[I1_CLONE]], [[TMP8]] ]
; CHECK-NEXT:    store i16 [[I1_VER_DEMOTED_0]], ptr getelementptr inbounds ([0 x i16], ptr @a, i64 0, i64 1), align 2
; CHECK-NEXT:    ret void
;
entry:
  %arrayidx = getelementptr inbounds i16, ptr %arg, i64 -1
  %i = load i16, ptr %arrayidx, align 2
  store i16 %i, ptr @a, align 2
  store i16 0, ptr @b, align 2
  %i1 = load i16, ptr %arrayidx, align 2
  store i16 %i1, ptr getelementptr inbounds ([0 x i16], ptr @a, i64 0, i64 1), align 2
  ret void
}
