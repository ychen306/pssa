; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=test-vector-codegen -p tobool,tobool.1,tobool.2,tobool.3 -find-conditional-deps | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@a = external global i32

; Point of this test: scev expander drops inbounds from GEP and in rare cases like this may cause inconsistent AA result before and after scev expansion
; CHECK: icmp ne <4 x i32>

define void @_Z1dPiPA0_A0_c(ptr %e, ptr %f) {
entry:
  %arrayidx14.3 = getelementptr inbounds [10 x i8], ptr %f, i64 0, i64 3
  %arrayidx14.4 = getelementptr inbounds [10 x i8], ptr %f, i64 0, i64 4
  br label %for.body

for.body:                                         ; preds = %entry
  %tobool = icmp ne i32 0, 0
  %conv2 = zext i1 %tobool to i32
  store i32 %conv2, ptr @a, align 4
  br label %land.rhs10.3

land.rhs10.3:                                     ; preds = %for.body
  %0 = load i8, ptr %arrayidx14.3, align 1
  br label %land.end16.3

land.end16.3:                                     ; preds = %land.rhs10.3
  br i1 false, label %land.end16.4, label %land.rhs10.4

land.rhs10.4:                                     ; preds = %land.end16.3
  %1 = load i8, ptr %arrayidx14.4, align 1
  br label %land.end16.4

land.end16.4:                                     ; preds = %land.rhs10.4, %land.end16.3
  store i32 0, ptr %e, align 4
  br label %land.end16.9

land.end16.9:                                     ; preds = %land.end16.4
  %tobool.1 = icmp ne i32 0, 0
  br label %land.end16.9.1

land.end16.9.1:                                   ; preds = %land.end16.9
  %2 = load i32, ptr %e, align 4
  %tobool.2 = icmp ne i32 %2, 0
  br label %land.end16.9.2

land.end16.9.2:                                   ; preds = %land.end16.9.1
  %tobool.3 = icmp ne i32 0, 0
  ret void
}
