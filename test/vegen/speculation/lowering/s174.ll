; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=test-vector-codegen,jump-threading,simplifycfg,gvn -p add,add.1,add.2,add.3 -p i1,i3,i6,i9 -p i2,i4,i7,i10 -p storeOf:add,storeOf:add.1,storeOf:add.2,storeOf:add.3 -find-conditional-deps | FileCheck %s
source_filename = "s174.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@a = local_unnamed_addr global [320000 x float] zeroinitializer, align 16
@b = local_unnamed_addr global [320000 x float] zeroinitializer, align 16

; Function Attrs: nofree norecurse nosync nounwind ssp uwtable
define void @s174(i32 noundef %M) local_unnamed_addr #0 {
; CHECK-LABEL: @s174(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = sext i32 [[M:%.*]] to i64
; CHECK-NEXT:    [[I5:%.*]] = add nsw i64 [[I]], 1
; CHECK-NEXT:    [[ARRAYIDX5_1:%.*]] = getelementptr inbounds [320000 x float], ptr @a, i64 0, i64 [[I5]]
; CHECK-NEXT:    [[IDENT_CHECK:%.*]] = icmp ult ptr [[ARRAYIDX5_1]], getelementptr (i8, ptr @a, i64 4)
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [320000 x float], ptr @a, i64 0, i64 [[I]]
; CHECK-NEXT:    [[IDENT_CHECK1:%.*]] = icmp ult ptr getelementptr (i8, ptr @a, i64 16), [[ARRAYIDX5]]
; CHECK-NEXT:    [[TMP0:%.*]] = or i1 [[IDENT_CHECK]], [[IDENT_CHECK1]]
; CHECK-NEXT:    br i1 [[TMP0]], label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    [[I3_VEC:%.*]] = load <4 x float>, ptr @a, align 16
; CHECK-NEXT:    [[I4_VEC4:%.*]] = load <4 x float>, ptr @b, align 16
; CHECK-NEXT:    [[ADD_1_VEC:%.*]] = fadd <4 x float> [[I3_VEC]], [[I4_VEC4]]
; CHECK-NEXT:    store <4 x float> [[ADD_1_VEC]], ptr [[ARRAYIDX5]], align 4
; CHECK-NEXT:    br label [[TMP7:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[I1_CLONE:%.*]] = load float, ptr @a, align 16, !tbaa [[TBAA5:![0-9]+]]
; CHECK-NEXT:    [[I4_VEC:%.*]] = load <4 x float>, ptr @b, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <4 x float> [[I4_VEC]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = extractelement <4 x float> [[I4_VEC]], i64 1
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <4 x float> [[I4_VEC]], i64 2
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <4 x float> [[I4_VEC]], i64 3
; CHECK-NEXT:    [[ADD_CLONE:%.*]] = fadd float [[I1_CLONE]], [[TMP3]]
; CHECK-NEXT:    store float [[ADD_CLONE]], ptr [[ARRAYIDX5]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[I8:%.*]] = add nsw i64 [[I]], 2
; CHECK-NEXT:    [[ARRAYIDX5_2:%.*]] = getelementptr inbounds [320000 x float], ptr @a, i64 0, i64 [[I8]]
; CHECK-NEXT:    [[I11:%.*]] = add nsw i64 [[I]], 3
; CHECK-NEXT:    [[ARRAYIDX5_3:%.*]] = getelementptr inbounds [320000 x float], ptr @a, i64 0, i64 [[I11]]
; CHECK-NEXT:    [[I3_CLONE:%.*]] = load float, ptr getelementptr inbounds ([320000 x float], ptr @a, i64 0, i64 1), align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[ADD_1_CLONE:%.*]] = fadd float [[I3_CLONE]], [[TMP4]]
; CHECK-NEXT:    store float [[ADD_1_CLONE]], ptr [[ARRAYIDX5_1]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[I6_CLONE:%.*]] = load float, ptr getelementptr inbounds ([320000 x float], ptr @a, i64 0, i64 2), align 8, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[ADD_2_CLONE:%.*]] = fadd float [[I6_CLONE]], [[TMP5]]
; CHECK-NEXT:    store float [[ADD_2_CLONE]], ptr [[ARRAYIDX5_2]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[I9_CLONE:%.*]] = load float, ptr getelementptr inbounds ([320000 x float], ptr @a, i64 0, i64 3), align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[ADD_3_CLONE:%.*]] = fadd float [[I9_CLONE]], [[TMP6]]
; CHECK-NEXT:    store float [[ADD_3_CLONE]], ptr [[ARRAYIDX5_3]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    br label [[TMP7]]
; CHECK:       7:
; CHECK-NEXT:    ret void
;
entry:
  %i = sext i32 %M to i64
  %i1 = load float, ptr @a, align 16, !tbaa !5
  %i2 = load float, ptr @b, align 16, !tbaa !5
  %add = fadd float %i1, %i2
  %arrayidx5 = getelementptr inbounds [320000 x float], ptr @a, i64 0, i64 %i
  store float %add, ptr %arrayidx5, align 4, !tbaa !5
  %i3 = load float, ptr getelementptr inbounds ([320000 x float], ptr @a, i64 0, i64 1), align 4, !tbaa !5
  %i4 = load float, ptr getelementptr inbounds ([320000 x float], ptr @b, i64 0, i64 1), align 4, !tbaa !5
  %add.1 = fadd float %i3, %i4
  %i5 = add nsw i64 %i, 1
  %arrayidx5.1 = getelementptr inbounds [320000 x float], ptr @a, i64 0, i64 %i5
  store float %add.1, ptr %arrayidx5.1, align 4, !tbaa !5
  %i6 = load float, ptr getelementptr inbounds ([320000 x float], ptr @a, i64 0, i64 2), align 8, !tbaa !5
  %i7 = load float, ptr getelementptr inbounds ([320000 x float], ptr @b, i64 0, i64 2), align 8, !tbaa !5
  %add.2 = fadd float %i6, %i7
  %i8 = add nsw i64 %i, 2
  %arrayidx5.2 = getelementptr inbounds [320000 x float], ptr @a, i64 0, i64 %i8
  store float %add.2, ptr %arrayidx5.2, align 4, !tbaa !5
  %i9 = load float, ptr getelementptr inbounds ([320000 x float], ptr @a, i64 0, i64 3), align 4, !tbaa !5
  %i10 = load float, ptr getelementptr inbounds ([320000 x float], ptr @b, i64 0, i64 3), align 4, !tbaa !5
  %add.3 = fadd float %i9, %i10
  %i11 = add nsw i64 %i, 3
  %arrayidx5.3 = getelementptr inbounds [320000 x float], ptr @a, i64 0, i64 %i11
  store float %add.3, ptr %arrayidx5.3, align 4, !tbaa !5
  ret void
}

attributes #0 = { nofree norecurse nosync nounwind ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 12f9c7b27063a4a487621f48c167e4f88de6d297)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
