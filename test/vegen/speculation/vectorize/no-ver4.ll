; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp -do-versioning | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@a = external global i32
@d = external global ptr

define i32 @e(ptr %b) {
; CHECK-LABEL: @e(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr @d, align 8
; CHECK-NEXT:    br label [[NODEBLOCK:%.*]]
; CHECK:       NodeBlock:
; CHECK-NEXT:    br i1 false, label [[LEAFBLOCK:%.*]], label [[LEAFBLOCK25:%.*]]
; CHECK:       LeafBlock25:
; CHECK-NEXT:    br i1 false, label [[FOR_COND_PREHEADER:%.*]], label [[SW_EPILOG:%.*]]
; CHECK:       LeafBlock:
; CHECK-NEXT:    br i1 false, label [[SW_BB3:%.*]], label [[SW_EPILOG]]
; CHECK:       for.cond.preheader:
; CHECK-NEXT:    br i1 false, label [[SW_EPILOG]], label [[FOR_BODY_LR_PH:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, ptr [[TMP0]], i64 1
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    store i8 0, ptr [[TMP0]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr getelementptr inbounds (i8, ptr @a, i64 1), align 1
; CHECK-NEXT:    store i8 0, ptr [[ARRAYIDX2]], align 1
; CHECK-NEXT:    br i1 false, label [[SW_EPILOG_LOOPEXIT27:%.*]], label [[FOR_BODY]]
; CHECK:       sw.bb3:
; CHECK-NEXT:    [[DOTPRE:%.*]] = load i32, ptr [[B:%.*]], align 4
; CHECK-NEXT:    br i1 false, label [[SW_EPILOG]], label [[FOR_BODY6_PREHEADER:%.*]]
; CHECK:       for.body6.preheader:
; CHECK-NEXT:    br label [[FOR_BODY6:%.*]]
; CHECK:       for.body6:
; CHECK-NEXT:    [[H_022:%.*]] = phi i32 [ [[DOTPRE]], [[FOR_BODY6_PREHEADER]] ], [ [[DEC:%.*]], [[FOR_BODY6]] ]
; CHECK-NEXT:    [[G_021:%.*]] = phi ptr [ [[TMP0]], [[FOR_BODY6_PREHEADER]] ], [ [[ADD_PTR:%.*]], [[FOR_BODY6]] ]
; CHECK-NEXT:    store i8 0, ptr [[G_021]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr getelementptr inbounds (i8, ptr @a, i64 1), align 1
; CHECK-NEXT:    [[ARRAYIDX10:%.*]] = getelementptr inbounds i8, ptr [[G_021]], i64 1
; CHECK-NEXT:    store i8 0, ptr [[ARRAYIDX10]], align 1
; CHECK-NEXT:    [[ADD_PTR]] = getelementptr inbounds i8, ptr [[G_021]], i64 3
; CHECK-NEXT:    [[DEC]] = add nsw i32 [[H_022]], 1
; CHECK-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i32 [[H_022]], 0
; CHECK-NEXT:    br i1 [[TOBOOL5_NOT]], label [[SW_EPILOG_LOOPEXIT:%.*]], label [[FOR_BODY6]]
; CHECK:       sw.epilog.loopexit:
; CHECK-NEXT:    br label [[SW_EPILOG]]
; CHECK:       sw.epilog.loopexit27:
; CHECK-NEXT:    br label [[SW_EPILOG]]
; CHECK:       sw.epilog:
; CHECK-NEXT:    ret i32 0
;
entry:
  %0 = load ptr, ptr @d, align 8
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  br i1 false, label %LeafBlock, label %LeafBlock25

LeafBlock25:                                      ; preds = %NodeBlock
  br i1 false, label %for.cond.preheader, label %sw.epilog

LeafBlock:                                        ; preds = %NodeBlock
  br i1 false, label %sw.bb3, label %sw.epilog

for.cond.preheader:                               ; preds = %LeafBlock25
  br i1 false, label %sw.epilog, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %arrayidx2 = getelementptr inbounds i8, ptr %0, i64 1
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  store i8 0, ptr %0, align 1
  %1 = load i8, ptr getelementptr inbounds (i8, ptr @a, i64 1), align 1
  store i8 0, ptr %arrayidx2, align 1
  br i1 false, label %sw.epilog.loopexit27, label %for.body

sw.bb3:                                           ; preds = %LeafBlock
  %.pre = load i32, ptr %b, align 4
  br i1 false, label %sw.epilog, label %for.body6.preheader

for.body6.preheader:                              ; preds = %sw.bb3
  br label %for.body6

for.body6:                                        ; preds = %for.body6, %for.body6.preheader
  %h.022 = phi i32 [ %dec, %for.body6 ], [ %.pre, %for.body6.preheader ]
  %g.021 = phi ptr [ %add.ptr, %for.body6 ], [ %0, %for.body6.preheader ]
  store i8 0, ptr %g.021, align 1
  %2 = load i8, ptr getelementptr inbounds (i8, ptr @a, i64 1), align 1
  %arrayidx10 = getelementptr inbounds i8, ptr %g.021, i64 1
  store i8 0, ptr %arrayidx10, align 1
  %add.ptr = getelementptr inbounds i8, ptr %g.021, i64 3
  %dec = add nsw i32 %h.022, 1
  %tobool5.not = icmp eq i32 %h.022, 0
  br i1 %tobool5.not, label %sw.epilog.loopexit, label %for.body6

sw.epilog.loopexit:                               ; preds = %for.body6
  br label %sw.epilog

sw.epilog.loopexit27:                             ; preds = %for.body
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.epilog.loopexit27, %sw.epilog.loopexit, %sw.bb3, %for.cond.preheader, %LeafBlock, %LeafBlock25
  ret i32 0
}
