; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp,jump-threading -do-versioning | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@a = external global ptr

define i32 @add_filt_fmask(i32 %0) #0 {
; CHECK-LABEL: @add_filt_fmask(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr @a, align 8
; CHECK-NEXT:    [[MUL:%.*]] = shl nsw i32 [[TMP0:%.*]], 1
; CHECK-NEXT:    [[IDX_EXT:%.*]] = sext i32 [[MUL]] to i64
; CHECK-NEXT:    [[IDX_NEG:%.*]] = sub nsw i64 0, [[IDX_EXT]]
; CHECK-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i64 [[IDX_NEG]]
; CHECK-NEXT:    [[TMP2:%.*]] = shl nsw i32 [[TMP0]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = sext i32 [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = shl nsw i64 [[TMP3]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 32, [[TMP4]]
; CHECK-NEXT:    [[UGLYGEP:%.*]] = getelementptr i8, ptr [[TMP1]], i64 [[TMP5]]
; CHECK-NEXT:    [[UGLYGEP1:%.*]] = getelementptr i8, ptr [[TMP1]], i64 12
; CHECK-NEXT:    [[IDENT_CHECK:%.*]] = icmp ult ptr [[UGLYGEP]], [[UGLYGEP1]]
; CHECK-NEXT:    [[UGLYGEP3:%.*]] = getelementptr i8, ptr [[TMP1]], i64 32
; CHECK-NEXT:    [[TMP6:%.*]] = shl nsw i32 [[TMP0]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = sext i32 [[TMP6]] to i64
; CHECK-NEXT:    [[TMP8:%.*]] = mul nsw i64 [[TMP7]], -4
; CHECK-NEXT:    [[UGLYGEP2:%.*]] = getelementptr i8, ptr [[TMP1]], i64 [[TMP8]]
; CHECK-NEXT:    [[IDENT_CHECK4:%.*]] = icmp ult ptr [[UGLYGEP3]], [[UGLYGEP2]]
; CHECK-NEXT:    [[TMP9:%.*]] = or i1 [[IDENT_CHECK]], [[IDENT_CHECK4]]
; CHECK-NEXT:    br i1 [[TMP9]], label [[TMP10:%.*]], label [[TMP11:%.*]]
; CHECK:       10:
; CHECK-NEXT:    store <8 x float> zeroinitializer, ptr [[TMP1]], align 4
; CHECK-NEXT:    store <8 x float> zeroinitializer, ptr [[ADD_PTR]], align 4, !alias.scope !0, !noalias !3
; CHECK-NEXT:    br label [[TMP12:%.*]]
; CHECK:       11:
; CHECK-NEXT:    store float 0.000000e+00, ptr [[TMP1]], align 4
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 1
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 2
; CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 3
; CHECK-NEXT:    [[ADD_PTR18:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 4
; CHECK-NEXT:    [[ARRAYIDX2_1:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 5
; CHECK-NEXT:    [[ARRAYIDX4_1:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 6
; CHECK-NEXT:    [[ARRAYIDX9_1:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 7
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX2]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX4]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ADD_PTR]], align 4
; CHECK-NEXT:    [[ARRAYIDX12:%.*]] = getelementptr inbounds float, ptr [[ADD_PTR]], i64 1
; CHECK-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds float, ptr [[ADD_PTR]], i64 2
; CHECK-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr inbounds float, ptr [[ADD_PTR]], i64 3
; CHECK-NEXT:    [[ADD_PTR19:%.*]] = getelementptr inbounds float, ptr [[ADD_PTR]], i64 4
; CHECK-NEXT:    [[ARRAYIDX12_1:%.*]] = getelementptr inbounds float, ptr [[ADD_PTR19]], i64 1
; CHECK-NEXT:    [[ARRAYIDX14_1:%.*]] = getelementptr inbounds float, ptr [[ADD_PTR19]], i64 2
; CHECK-NEXT:    [[ARRAYIDX16_1:%.*]] = getelementptr inbounds float, ptr [[ADD_PTR19]], i64 3
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX9]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX12]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX14]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX16]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ADD_PTR18]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX2_1]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX4_1]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ADD_PTR19]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX9_1]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX12_1]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX14_1]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX16_1]], align 4
; CHECK-NEXT:    br label [[TMP12]]
; CHECK:       12:
; CHECK-NEXT:    ret i32 0
;
entry:
  %1 = load ptr, ptr @a, align 8
  %mul = shl nsw i32 %0, 1
  %idx.ext = sext i32 %mul to i64
  %idx.neg = sub nsw i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i32, ptr %1, i64 %idx.neg
  store float 0.000000e+00, ptr %1, align 4
  %arrayidx2 = getelementptr inbounds float, ptr %1, i64 1
  store float 0.000000e+00, ptr %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds float, ptr %1, i64 2
  store float 0.000000e+00, ptr %arrayidx4, align 4
  store float 0.000000e+00, ptr %add.ptr, align 4
  %arrayidx9 = getelementptr inbounds float, ptr %1, i64 3
  store float 0.000000e+00, ptr %arrayidx9, align 4
  %arrayidx12 = getelementptr inbounds float, ptr %add.ptr, i64 1
  store float 0.000000e+00, ptr %arrayidx12, align 4
  %arrayidx14 = getelementptr inbounds float, ptr %add.ptr, i64 2
  store float 0.000000e+00, ptr %arrayidx14, align 4
  %arrayidx16 = getelementptr inbounds float, ptr %add.ptr, i64 3
  store float 0.000000e+00, ptr %arrayidx16, align 4
  %add.ptr18 = getelementptr inbounds float, ptr %1, i64 4
  %add.ptr19 = getelementptr inbounds float, ptr %add.ptr, i64 4
  store float 0.000000e+00, ptr %add.ptr18, align 4
  %arrayidx2.1 = getelementptr inbounds float, ptr %1, i64 5
  store float 0.000000e+00, ptr %arrayidx2.1, align 4
  %arrayidx4.1 = getelementptr inbounds float, ptr %1, i64 6
  store float 0.000000e+00, ptr %arrayidx4.1, align 4
  store float 0.000000e+00, ptr %add.ptr19, align 4
  %arrayidx9.1 = getelementptr inbounds float, ptr %1, i64 7
  store float 0.000000e+00, ptr %arrayidx9.1, align 4
  %arrayidx12.1 = getelementptr inbounds float, ptr %add.ptr19, i64 1
  store float 0.000000e+00, ptr %arrayidx12.1, align 4
  %arrayidx14.1 = getelementptr inbounds float, ptr %add.ptr19, i64 2
  store float 0.000000e+00, ptr %arrayidx14.1, align 4
  %arrayidx16.1 = getelementptr inbounds float, ptr %add.ptr19, i64 3
  store float 0.000000e+00, ptr %arrayidx16.1, align 4
  ret i32 0
}

attributes #0 = { "target-cpu"="icelake-client" }
