; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp -do-versioning | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

define void @_ZN20ComputeNonbondedUtil9calc_selfEP9nonbonded(ptr %pairlists.sroa.0.0.copyload) {
; CHECK-LABEL: @_ZN20ComputeNonbondedUtil9calc_selfEP9nonbonded(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SUB_PTR_RHS_CAST:%.*]] = ptrtoint ptr [[PAIRLISTS_SROA_0_0_COPYLOAD:%.*]] to i64
; CHECK-NEXT:    [[CONV:%.*]] = trunc i64 [[SUB_PTR_RHS_CAST]] to i32
; CHECK-NEXT:    [[IDXPROM_I31:%.*]] = sext i32 [[CONV]] to i64
; CHECK-NEXT:    [[ARRAYIDX_I32:%.*]] = getelementptr inbounds i16, ptr [[PAIRLISTS_SROA_0_0_COPYLOAD]], i64 [[IDXPROM_I31]]
; CHECK-NEXT:    br label [[HEADER:%.*]]
; CHECK:       header:
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[PAIRLISTS_SROA_0_0_COPYLOAD]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i64 [[TMP0]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; CHECK-NEXT:    [[TMP3:%.*]] = shl nsw i64 [[TMP2]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = add nsw i64 [[TMP3]], 2
; CHECK-NEXT:    [[UGLYGEP:%.*]] = getelementptr i8, ptr [[PAIRLISTS_SROA_0_0_COPYLOAD]], i64 [[TMP4]]
; CHECK-NEXT:    [[IDENT_CHECK:%.*]] = icmp ult ptr [[UGLYGEP]], [[PAIRLISTS_SROA_0_0_COPYLOAD]]
; CHECK-NEXT:    [[UGLYGEP2:%.*]] = getelementptr i8, ptr [[PAIRLISTS_SROA_0_0_COPYLOAD]], i64 2
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP0]] to i32
; CHECK-NEXT:    [[TMP6:%.*]] = sext i32 [[TMP5]] to i64
; CHECK-NEXT:    [[TMP7:%.*]] = shl nsw i64 [[TMP6]], 1
; CHECK-NEXT:    [[UGLYGEP1:%.*]] = getelementptr i8, ptr [[PAIRLISTS_SROA_0_0_COPYLOAD]], i64 [[TMP7]]
; CHECK-NEXT:    [[IDENT_CHECK3:%.*]] = icmp ult ptr [[UGLYGEP2]], [[UGLYGEP1]]
; CHECK-NEXT:    [[TMP8:%.*]] = or i1 [[IDENT_CHECK]], [[IDENT_CHECK3]]
; CHECK-NEXT:    br i1 [[TMP8]], label [[TMP9:%.*]], label [[TMP10:%.*]]
; CHECK:       latch:
; CHECK-NEXT:    br i1 false, label [[HEADER]], label [[EXIT:%.*]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       9:
; CHECK-NEXT:    br label [[TMP11:%.*]]
; CHECK:       10:
; CHECK-NEXT:    store i16 0, ptr [[ARRAYIDX_I32]], align 2
; CHECK-NEXT:    br label [[TMP11]]
; CHECK:       11:
; CHECK-NEXT:    [[ARRAYIDX17_1:%.*]] = getelementptr inbounds i16, ptr [[ARRAYIDX_I32]], i64 1
; CHECK-NEXT:    [[ARRAYIDX17_2:%.*]] = getelementptr inbounds i16, ptr [[ARRAYIDX_I32]], i64 2
; CHECK-NEXT:    [[ARRAYIDX17_3:%.*]] = getelementptr inbounds i16, ptr [[ARRAYIDX_I32]], i64 3
; CHECK-NEXT:    [[ARRAYIDX17_4:%.*]] = getelementptr inbounds i16, ptr [[ARRAYIDX_I32]], i64 4
; CHECK-NEXT:    [[ARRAYIDX17_5:%.*]] = getelementptr inbounds i16, ptr [[ARRAYIDX_I32]], i64 5
; CHECK-NEXT:    [[ARRAYIDX17_6:%.*]] = getelementptr inbounds i16, ptr [[ARRAYIDX_I32]], i64 6
; CHECK-NEXT:    [[ARRAYIDX17_7:%.*]] = getelementptr inbounds i16, ptr [[ARRAYIDX_I32]], i64 7
; CHECK-NEXT:    br i1 [[TMP8]], label [[TMP12:%.*]], label [[TMP14:%.*]]
; CHECK:       12:
; CHECK-NEXT:    [[TMP13:%.*]] = load i16, ptr [[PAIRLISTS_SROA_0_0_COPYLOAD]], align 2, !alias.scope !0, !noalias !3
; CHECK-NEXT:    store <8 x i16> zeroinitializer, ptr [[ARRAYIDX_I32]], align 2
; CHECK-NEXT:    br label [[TMP16:%.*]]
; CHECK:       14:
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[PAIRLISTS_SROA_0_0_COPYLOAD]], align 2
; CHECK-NEXT:    store i16 0, ptr [[ARRAYIDX17_1]], align 2
; CHECK-NEXT:    store i16 0, ptr [[ARRAYIDX17_2]], align 2
; CHECK-NEXT:    store i16 0, ptr [[ARRAYIDX17_3]], align 2
; CHECK-NEXT:    store i16 0, ptr [[ARRAYIDX17_4]], align 2
; CHECK-NEXT:    store i16 0, ptr [[ARRAYIDX17_5]], align 2
; CHECK-NEXT:    store i16 0, ptr [[ARRAYIDX17_6]], align 2
; CHECK-NEXT:    store i16 0, ptr [[ARRAYIDX17_7]], align 2
; CHECK-NEXT:    br label [[TMP16]]
; CHECK:       16:
; CHECK-NEXT:    br label [[LATCH:%.*]]
;
entry:
  br label %for.body

for.body:                                         ; preds = %entry
  %sub.ptr.rhs.cast = ptrtoint ptr %pairlists.sroa.0.0.copyload to i64
  %conv = trunc i64 %sub.ptr.rhs.cast to i32
  %idxprom.i31 = sext i32 %conv to i64
  %arrayidx.i32 = getelementptr inbounds i16, ptr %pairlists.sroa.0.0.copyload, i64 %idxprom.i31
  br label %for.body14

for.body14:                                       ; preds = %for.body14, %for.body
  store i16 0, ptr %arrayidx.i32, align 2
  %0 = load i16, ptr %pairlists.sroa.0.0.copyload, align 2
  %arrayidx17.1 = getelementptr inbounds i16, ptr %arrayidx.i32, i64 1
  store i16 0, ptr %arrayidx17.1, align 2
  %arrayidx17.2 = getelementptr inbounds i16, ptr %arrayidx.i32, i64 2
  store i16 0, ptr %arrayidx17.2, align 2
  %arrayidx17.3 = getelementptr inbounds i16, ptr %arrayidx.i32, i64 3
  store i16 0, ptr %arrayidx17.3, align 2
  %arrayidx17.4 = getelementptr inbounds i16, ptr %arrayidx.i32, i64 4
  store i16 0, ptr %arrayidx17.4, align 2
  %arrayidx17.5 = getelementptr inbounds i16, ptr %arrayidx.i32, i64 5
  store i16 0, ptr %arrayidx17.5, align 2
  %arrayidx17.6 = getelementptr inbounds i16, ptr %arrayidx.i32, i64 6
  store i16 0, ptr %arrayidx17.6, align 2
  %arrayidx17.7 = getelementptr inbounds i16, ptr %arrayidx.i32, i64 7
  store i16 0, ptr %arrayidx17.7, align 2
  br i1 false, label %for.body14, label %for.end.loopexit.unr-lcssa

for.end.loopexit.unr-lcssa:                       ; preds = %for.body14
  ret void
}
