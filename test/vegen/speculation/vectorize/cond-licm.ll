; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp -do-versioning | FileCheck %s
; ModuleID = 'small.i'
source_filename = "small.i"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@b = local_unnamed_addr global i16 0, align 2
@c = local_unnamed_addr global ptr null, align 8
@a = external local_unnamed_addr global [0 x i16], align 2

; Function Attrs: mustprogress nofree norecurse nosync nounwind ssp uwtable
define void @_Z1dv() local_unnamed_addr #0 {
; CHECK-LABEL: @_Z1dv(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr @c, align 8, !tbaa [[TBAA5:![0-9]+]]
; CHECK-NEXT:    br i1 false, label [[TMP1:%.*]], label [[TMP2:%.*]]
; CHECK:       1:
; CHECK-NEXT:    br label [[TMP64:%.*]]
; CHECK:       2:
; CHECK-NEXT:    [[UGLYGEP:%.*]] = getelementptr i8, ptr [[TMP0]], i64 16
; CHECK-NEXT:    [[IDENT_CHECK:%.*]] = icmp ult ptr getelementptr (i8, ptr @a, i64 16), [[UGLYGEP]]
; CHECK-NEXT:    [[UGLYGEP1:%.*]] = getelementptr i8, ptr [[TMP0]], i64 18
; CHECK-NEXT:    [[IDENT_CHECK2:%.*]] = icmp ult ptr [[UGLYGEP1]], getelementptr (i8, ptr @a, i64 2)
; CHECK-NEXT:    [[TMP3:%.*]] = or i1 [[IDENT_CHECK]], [[IDENT_CHECK2]]
; CHECK-NEXT:    br i1 [[TMP3]], label [[TMP6:%.*]], label [[TMP7:%.*]]
; CHECK:       4:
; CHECK-NEXT:    br label [[TMP63:%.*]]
; CHECK:       5:
; CHECK-NEXT:    br label [[HEADER:%.*]]
; CHECK:       6:
; CHECK-NEXT:    br i1 false, label [[TMP19:%.*]], label [[TMP20:%.*]]
; CHECK:       7:
; CHECK-NEXT:    br i1 false, label [[TMP4:%.*]], label [[TMP5:%.*]]
; CHECK:       header:
; CHECK-NEXT:    [[NITER_CLONE:%.*]] = phi i64 [ 0, [[TMP5]] ], [ [[NITER_NEXT_7_CLONE:%.*]], [[LATCH:%.*]] ]
; CHECK-NEXT:    [[INDVARS_IV_CLONE:%.*]] = phi i64 [ 1, [[TMP5]] ], [ [[INDVARS_IV_NEXT_7_CLONE:%.*]], [[LATCH]] ]
; CHECK-NEXT:    [[ARRAYIDX_CLONE:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_CLONE]]
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[ARRAYIDX_CLONE]], align 2, !tbaa [[TBAA9:![0-9]+]]
; CHECK-NEXT:    [[ARRAYIDX2_CLONE:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_CLONE]]
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[ARRAYIDX2_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_CLONE:%.*]] = add nuw nsw i64 [[INDVARS_IV_CLONE]], 1
; CHECK-NEXT:    [[NITER_NEXT_CLONE:%.*]] = add nuw nsw i64 [[NITER_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX_1_CLONE:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_CLONE]]
; CHECK-NEXT:    [[TMP9:%.*]] = load i16, ptr [[ARRAYIDX_1_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[ARRAYIDX2_1_CLONE:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_CLONE]]
; CHECK-NEXT:    store i16 [[TMP9]], ptr [[ARRAYIDX2_1_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_1_CLONE:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_CLONE]], 1
; CHECK-NEXT:    [[NITER_NEXT_1_CLONE:%.*]] = add nuw nsw i64 [[NITER_NEXT_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX_2_CLONE:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_1_CLONE]]
; CHECK-NEXT:    [[TMP10:%.*]] = load i16, ptr [[ARRAYIDX_2_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[ARRAYIDX2_2_CLONE:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_1_CLONE]]
; CHECK-NEXT:    store i16 [[TMP10]], ptr [[ARRAYIDX2_2_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_2_CLONE:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_1_CLONE]], 1
; CHECK-NEXT:    [[NITER_NEXT_2_CLONE:%.*]] = add nuw nsw i64 [[NITER_NEXT_1_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX_3_CLONE:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_2_CLONE]]
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[ARRAYIDX_3_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[ARRAYIDX2_3_CLONE:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_2_CLONE]]
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[ARRAYIDX2_3_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_3_CLONE:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_2_CLONE]], 1
; CHECK-NEXT:    [[NITER_NEXT_3_CLONE:%.*]] = add nuw nsw i64 [[NITER_NEXT_2_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX_4_CLONE:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_3_CLONE]]
; CHECK-NEXT:    [[TMP12:%.*]] = load i16, ptr [[ARRAYIDX_4_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[ARRAYIDX2_4_CLONE:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_3_CLONE]]
; CHECK-NEXT:    store i16 [[TMP12]], ptr [[ARRAYIDX2_4_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_4_CLONE:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_3_CLONE]], 1
; CHECK-NEXT:    [[NITER_NEXT_4_CLONE:%.*]] = add nuw nsw i64 [[NITER_NEXT_3_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX_5_CLONE:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_4_CLONE]]
; CHECK-NEXT:    [[TMP13:%.*]] = load i16, ptr [[ARRAYIDX_5_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[ARRAYIDX2_5_CLONE:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_4_CLONE]]
; CHECK-NEXT:    store i16 [[TMP13]], ptr [[ARRAYIDX2_5_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_5_CLONE:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_4_CLONE]], 1
; CHECK-NEXT:    [[NITER_NEXT_5_CLONE:%.*]] = add nuw nsw i64 [[NITER_NEXT_4_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX_6_CLONE:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_5_CLONE]]
; CHECK-NEXT:    [[TMP14:%.*]] = load i16, ptr [[ARRAYIDX_6_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[ARRAYIDX2_6_CLONE:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_5_CLONE]]
; CHECK-NEXT:    store i16 [[TMP14]], ptr [[ARRAYIDX2_6_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_6_CLONE:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_5_CLONE]], 1
; CHECK-NEXT:    [[NITER_NEXT_6_CLONE:%.*]] = add nuw nsw i64 [[NITER_NEXT_5_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX_7_CLONE:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_6_CLONE]]
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[ARRAYIDX_7_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[ARRAYIDX2_7_CLONE:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_6_CLONE]]
; CHECK-NEXT:    store i16 [[TMP15]], ptr [[ARRAYIDX2_7_CLONE]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_7_CLONE]] = add nuw nsw i64 [[INDVARS_IV_NEXT_6_CLONE]], 1
; CHECK-NEXT:    [[NITER_NEXT_7_CLONE]] = add nuw nsw i64 [[NITER_NEXT_6_CLONE]], 1
; CHECK-NEXT:    [[NITER_NCMP_7_CLONE:%.*]] = icmp eq i64 [[NITER_NEXT_7_CLONE]], 4294967288
; CHECK-NEXT:    br i1 [[NITER_NCMP_7_CLONE]], label [[TMP16:%.*]], label [[TMP17:%.*]]
; CHECK:       latch:
; CHECK-NEXT:    br i1 [[SHOULD_CONTINUE_MEM_0:%.*]], label [[HEADER]], label [[EXIT:%.*]]
; CHECK:       exit:
; CHECK-NEXT:    br label [[TMP63]]
; CHECK:       16:
; CHECK-NEXT:    br label [[TMP18:%.*]]
; CHECK:       17:
; CHECK-NEXT:    br label [[TMP18]]
; CHECK:       18:
; CHECK-NEXT:    [[SHOULD_CONTINUE_MEM_0]] = phi i1 [ false, [[TMP16]] ], [ true, [[TMP17]] ]
; CHECK-NEXT:    br label [[LATCH]]
; CHECK:       19:
; CHECK-NEXT:    br label [[TMP63]]
; CHECK:       20:
; CHECK-NEXT:    br label [[HEADER3:%.*]]
; CHECK:       header3:
; CHECK-NEXT:    [[DOTMEM_0:%.*]] = phi i16 [ undef, [[TMP20]] ], [ [[DOTMEM_1:%.*]], [[LATCH4:%.*]] ]
; CHECK-NEXT:    [[INDVAR:%.*]] = phi i64 [ 0, [[TMP20]] ], [ [[INDVAR_NEXT:%.*]], [[LATCH4]] ]
; CHECK-NEXT:    [[NITER:%.*]] = phi i64 [ 0, [[TMP20]] ], [ [[NITER_NEXT_7:%.*]], [[LATCH4]] ]
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 1, [[TMP20]] ], [ [[INDVARS_IV_NEXT_7:%.*]], [[LATCH4]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV]]
; CHECK:    br i1 [[TMP25:%.*]], label [[TMP26:%.*]], label [[TMP27:%.*]]
; CHECK:       latch4:
; CHECK-NEXT:    br i1 [[SHOULD_CONTINUE_MEM6_0:%.*]], label [[HEADER3]], label [[EXIT5:%.*]]
; CHECK:       exit5:
; CHECK-NEXT:    br label [[TMP63]]
; CHECK:       26:
; CHECK-NEXT:    br label [[TMP29:%.*]]
; CHECK:       27:
; CHECK-NEXT:    [[TMP28:%.*]] = load i16, ptr [[ARRAYIDX]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    br label [[TMP29]]
; CHECK:       29:
; CHECK-NEXT:    [[DOTMEM_1]] = phi i16 [ [[DOTMEM_0]], [[TMP26]] ], [ [[TMP28]], [[TMP27]] ]
; CHECK-NEXT:    [[INDVARS_IV_NEXT:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[ARRAYIDX_1:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_1:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT]], 1
; CHECK-NEXT:    [[ARRAYIDX_2:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_1]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_2:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_1]], 1
; CHECK-NEXT:    [[ARRAYIDX_3:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_2]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_3:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_2]], 1
; CHECK-NEXT:    [[ARRAYIDX_4:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_3]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_4:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_3]], 1
; CHECK-NEXT:    [[ARRAYIDX_5:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_4]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_5:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_4]], 1
; CHECK-NEXT:    [[ARRAYIDX_6:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_5]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_6:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_5]], 1
; CHECK-NEXT:    [[ARRAYIDX_7:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_NEXT_6]]
; CHECK-NEXT:    br i1 [[TMP25]], label [[TMP30:%.*]], label [[TMP31:%.*]]
; CHECK:       30:
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[DOTVEC:%.*]] = load <8 x i16>, ptr [[ARRAYIDX]], align 2
; CHECK-NEXT:    br label [[TMP47:%.*]]
; CHECK:       31:
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP32:%.*]] = load i16, ptr [[ARRAYIDX_1]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP33:%.*]] = load i16, ptr [[ARRAYIDX_2]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP34:%.*]] = load i16, ptr [[ARRAYIDX_3]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP35:%.*]] = load i16, ptr [[ARRAYIDX_4]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP36:%.*]] = load i16, ptr [[ARRAYIDX_5]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP37:%.*]] = load i16, ptr [[ARRAYIDX_6]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP38:%.*]] = load i16, ptr [[ARRAYIDX_7]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <8 x i16> undef, i16 [[DOTMEM_1]], i64 0
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <8 x i16> [[TMP39]], i16 [[TMP32]], i64 1
; CHECK-NEXT:    [[TMP41:%.*]] = insertelement <8 x i16> [[TMP40]], i16 [[TMP33]], i64 2
; CHECK-NEXT:    [[TMP42:%.*]] = insertelement <8 x i16> [[TMP41]], i16 [[TMP34]], i64 3
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <8 x i16> [[TMP42]], i16 [[TMP35]], i64 4
; CHECK-NEXT:    [[TMP44:%.*]] = insertelement <8 x i16> [[TMP43]], i16 [[TMP36]], i64 5
; CHECK-NEXT:    [[TMP45:%.*]] = insertelement <8 x i16> [[TMP44]], i16 [[TMP37]], i64 6
; CHECK-NEXT:    [[TMP46:%.*]] = insertelement <8 x i16> [[TMP45]], i16 [[TMP38]], i64 7
; CHECK-NEXT:    br label [[TMP47]]
; CHECK:       47:
; CHECK-NEXT:    [[DOTVER_VEC_DEMOTED_0:%.*]] = phi <8 x i16> [ [[DOTVEC]], [[TMP30]] ], [ [[TMP46]], [[TMP31]] ]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[ARRAYIDX2_1:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[ARRAYIDX2_2:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_1]]
; CHECK-NEXT:    [[ARRAYIDX2_3:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_2]]
; CHECK-NEXT:    [[ARRAYIDX2_4:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_3]]
; CHECK-NEXT:    [[ARRAYIDX2_5:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_4]]
; CHECK-NEXT:    [[ARRAYIDX2_6:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_5]]
; CHECK-NEXT:    [[ARRAYIDX2_7:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_6]]
; CHECK-NEXT:    store <8 x i16> [[DOTVER_VEC_DEMOTED_0]], ptr [[ARRAYIDX2]], align 2
; CHECK-NEXT:    [[NITER_NEXT:%.*]] = add nuw nsw i64 [[NITER]], 1
; CHECK-NEXT:    [[NITER_NEXT_1:%.*]] = add nuw nsw i64 [[NITER_NEXT]], 1
; CHECK-NEXT:    [[NITER_NEXT_2:%.*]] = add nuw nsw i64 [[NITER_NEXT_1]], 1
; CHECK-NEXT:    br i1 [[TMP25]], label [[TMP48:%.*]], label [[TMP49:%.*]]
; CHECK:       48:
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    br label [[TMP50:%.*]]
; CHECK:       49:
; CHECK-NEXT:    br label [[TMP50]]
; CHECK:       50:
; CHECK-NEXT:    [[NITER_NEXT_3:%.*]] = add nuw nsw i64 [[NITER_NEXT_2]], 1
; CHECK-NEXT:    br i1 [[TMP25]], label [[TMP51:%.*]], label [[TMP52:%.*]]
; CHECK:       51:
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    br label [[TMP53:%.*]]
; CHECK:       52:
; CHECK-NEXT:    br label [[TMP53]]
; CHECK:       53:
; CHECK-NEXT:    [[NITER_NEXT_4:%.*]] = add nuw nsw i64 [[NITER_NEXT_3]], 1
; CHECK-NEXT:    br i1 [[TMP25]], label [[TMP54:%.*]], label [[TMP55:%.*]]
; CHECK:       54:
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    br label [[TMP56:%.*]]
; CHECK:       55:
; CHECK-NEXT:    br label [[TMP56]]
; CHECK:       56:
; CHECK-NEXT:    [[NITER_NEXT_5:%.*]] = add nuw nsw i64 [[NITER_NEXT_4]], 1
; CHECK-NEXT:    br i1 [[TMP25]], label [[TMP57:%.*]], label [[TMP58:%.*]]
; CHECK:       57:
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    br label [[TMP59:%.*]]
; CHECK:       58:
; CHECK-NEXT:    br label [[TMP59]]
; CHECK:       59:
; CHECK-NEXT:    [[NITER_NEXT_6:%.*]] = add nuw nsw i64 [[NITER_NEXT_5]], 1
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_7]] = add nuw nsw i64 [[INDVARS_IV_NEXT_6]], 1
; CHECK-NEXT:    [[NITER_NEXT_7]] = add nuw nsw i64 [[NITER_NEXT_6]], 1
; CHECK-NEXT:    [[NITER_NCMP_7:%.*]] = icmp eq i64 [[NITER_NEXT_7]], 4294967288
; CHECK-NEXT:    [[INDVAR_NEXT]] = add i64 [[INDVAR]], 1
; CHECK-NEXT:    br i1 [[NITER_NCMP_7]], label [[TMP60:%.*]], label [[TMP61:%.*]]
; CHECK:       60:
; CHECK-NEXT:    br label [[TMP62:%.*]]
; CHECK:       61:
; CHECK-NEXT:    br label [[TMP62]]
; CHECK:       62:
; CHECK-NEXT:    [[SHOULD_CONTINUE_MEM6_0]] = phi i1 [ false, [[TMP60]] ], [ true, [[TMP61]] ]
; CHECK-NEXT:    br label [[LATCH4]]
; CHECK:       63:
; CHECK-NEXT:    [[INDVARS_IV_NEXT_7_VER_DEMOTED_0:%.*]] = phi i64 [ undef, [[TMP19]] ], [ [[INDVARS_IV_NEXT_7]], [[EXIT5]] ], [ undef, [[TMP4]] ], [ [[INDVARS_IV_NEXT_7_CLONE]], [[EXIT]] ]
; CHECK-NEXT:    br label [[TMP64]]
; CHECK:       64:
; CHECK-NEXT:    [[INDVARS_IV_UNR_DEMOTED_0:%.*]] = phi i64 [ 1, [[TMP1]] ], [ [[INDVARS_IV_NEXT_7_VER_DEMOTED_0]], [[TMP63]] ]
; CHECK-NEXT:    br i1 true, label [[TMP65:%.*]], label [[TMP66:%.*]]
; CHECK:       65:
; CHECK-NEXT:    br label [[HEADER12:%.*]]
; CHECK:       66:
; CHECK-NEXT:    br label [[TMP68:%.*]]
; CHECK:       header12:
; CHECK-NEXT:    [[EPIL_ITER:%.*]] = phi i64 [ 0, [[TMP65]] ], [ [[EPIL_ITER_NEXT:%.*]], [[LATCH13:%.*]] ]
; CHECK-NEXT:    [[INDVARS_IV_EPIL:%.*]] = phi i64 [ [[INDVARS_IV_UNR_DEMOTED_0]], [[TMP65]] ], [ [[INDVARS_IV_NEXT_EPIL:%.*]], [[LATCH13]] ]
; CHECK-NEXT:    [[ARRAYIDX_EPIL:%.*]] = getelementptr inbounds i16, ptr [[TMP0]], i64 [[INDVARS_IV_EPIL]]
; CHECK-NEXT:    [[TMP67:%.*]] = load i16, ptr [[ARRAYIDX_EPIL]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[ARRAYIDX2_EPIL:%.*]] = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_EPIL]]
; CHECK-NEXT:    store i16 [[TMP67]], ptr [[ARRAYIDX2_EPIL]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 0, ptr @b, align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_EPIL]] = add nuw nsw i64 [[INDVARS_IV_EPIL]], 1
; CHECK-NEXT:    [[EXITCOND_EPIL:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT_EPIL]], 4294967296
; CHECK-NEXT:    [[EPIL_ITER_NEXT]] = add i64 [[EPIL_ITER]], 1
; CHECK-NEXT:    [[EPIL_ITER_CMP:%.*]] = icmp ne i64 [[EPIL_ITER_NEXT]], 7
; CHECK-NEXT:    br label [[LATCH13]]
; CHECK:       latch13:
; CHECK-NEXT:    br i1 [[EPIL_ITER_CMP]], label [[HEADER12]], label [[EXIT14:%.*]]
; CHECK:       exit14:
; CHECK-NEXT:    br label [[TMP68]]
; CHECK:       68:
; CHECK-NEXT:    ret void
;
entry:
  %0 = load ptr, ptr @c, align 8, !tbaa !5
  br i1 false, label %for.cond.cleanup.unr-lcssa, label %entry.new

entry.new:                                        ; preds = %entry
  br label %for.body

for.cond.cleanup.unr-lcssa.loopexit:              ; preds = %for.body
  %indvars.iv.unr.ph = phi i64 [ %indvars.iv.next.7, %for.body ]
  br label %for.cond.cleanup.unr-lcssa

for.cond.cleanup.unr-lcssa:                       ; preds = %for.cond.cleanup.unr-lcssa.loopexit, %entry
  %indvars.iv.unr = phi i64 [ 1, %entry ], [ %indvars.iv.unr.ph, %for.cond.cleanup.unr-lcssa.loopexit ]
  br i1 true, label %for.body.epil.preheader, label %for.cond.cleanup

for.body.epil.preheader:                          ; preds = %for.cond.cleanup.unr-lcssa
  br label %for.body.epil

for.body.epil:                                    ; preds = %for.body.epil, %for.body.epil.preheader
  %indvars.iv.epil = phi i64 [ %indvars.iv.unr, %for.body.epil.preheader ], [ %indvars.iv.next.epil, %for.body.epil ]
  %epil.iter = phi i64 [ 0, %for.body.epil.preheader ], [ %epil.iter.next, %for.body.epil ]
  %arrayidx.epil = getelementptr inbounds i16, ptr %0, i64 %indvars.iv.epil
  %1 = load i16, ptr %arrayidx.epil, align 2, !tbaa !9
  %arrayidx2.epil = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 %indvars.iv.epil
  store i16 %1, ptr %arrayidx2.epil, align 2, !tbaa !9
  store i16 0, ptr @b, align 2, !tbaa !9
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %exitcond.epil = icmp eq i64 %indvars.iv.next.epil, 4294967296
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp = icmp ne i64 %epil.iter.next, 7
  br i1 %epil.iter.cmp, label %for.body.epil, label %for.cond.cleanup.epilog-lcssa, !llvm.loop !11

for.cond.cleanup.epilog-lcssa:                    ; preds = %for.body.epil
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.unr-lcssa, %for.cond.cleanup.epilog-lcssa
  ret void

for.body:                                         ; preds = %for.body, %entry.new
  %indvars.iv = phi i64 [ 1, %entry.new ], [ %indvars.iv.next.7, %for.body ]
  %niter = phi i64 [ 0, %entry.new ], [ %niter.next.7, %for.body ]
  %arrayidx = getelementptr inbounds i16, ptr %0, i64 %indvars.iv
  %2 = load i16, ptr %arrayidx, align 2, !tbaa !9
  %arrayidx2 = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 %indvars.iv
  store i16 %2, ptr %arrayidx2, align 2, !tbaa !9
  store i16 0, ptr @b, align 2, !tbaa !9
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %niter.next = add nuw nsw i64 %niter, 1
  %arrayidx.1 = getelementptr inbounds i16, ptr %0, i64 %indvars.iv.next
  %3 = load i16, ptr %arrayidx.1, align 2, !tbaa !9
  %arrayidx2.1 = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 %indvars.iv.next
  store i16 %3, ptr %arrayidx2.1, align 2, !tbaa !9
  store i16 0, ptr @b, align 2, !tbaa !9
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next, 1
  %niter.next.1 = add nuw nsw i64 %niter.next, 1
  %arrayidx.2 = getelementptr inbounds i16, ptr %0, i64 %indvars.iv.next.1
  %4 = load i16, ptr %arrayidx.2, align 2, !tbaa !9
  %arrayidx2.2 = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 %indvars.iv.next.1
  store i16 %4, ptr %arrayidx2.2, align 2, !tbaa !9
  store i16 0, ptr @b, align 2, !tbaa !9
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.next.1, 1
  %niter.next.2 = add nuw nsw i64 %niter.next.1, 1
  %arrayidx.3 = getelementptr inbounds i16, ptr %0, i64 %indvars.iv.next.2
  %5 = load i16, ptr %arrayidx.3, align 2, !tbaa !9
  %arrayidx2.3 = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 %indvars.iv.next.2
  store i16 %5, ptr %arrayidx2.3, align 2, !tbaa !9
  store i16 0, ptr @b, align 2, !tbaa !9
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.next.2, 1
  %niter.next.3 = add nuw nsw i64 %niter.next.2, 1
  %arrayidx.4 = getelementptr inbounds i16, ptr %0, i64 %indvars.iv.next.3
  %6 = load i16, ptr %arrayidx.4, align 2, !tbaa !9
  %arrayidx2.4 = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 %indvars.iv.next.3
  store i16 %6, ptr %arrayidx2.4, align 2, !tbaa !9
  store i16 0, ptr @b, align 2, !tbaa !9
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv.next.3, 1
  %niter.next.4 = add nuw nsw i64 %niter.next.3, 1
  %arrayidx.5 = getelementptr inbounds i16, ptr %0, i64 %indvars.iv.next.4
  %7 = load i16, ptr %arrayidx.5, align 2, !tbaa !9
  %arrayidx2.5 = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 %indvars.iv.next.4
  store i16 %7, ptr %arrayidx2.5, align 2, !tbaa !9
  store i16 0, ptr @b, align 2, !tbaa !9
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv.next.4, 1
  %niter.next.5 = add nuw nsw i64 %niter.next.4, 1
  %arrayidx.6 = getelementptr inbounds i16, ptr %0, i64 %indvars.iv.next.5
  %8 = load i16, ptr %arrayidx.6, align 2, !tbaa !9
  %arrayidx2.6 = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 %indvars.iv.next.5
  store i16 %8, ptr %arrayidx2.6, align 2, !tbaa !9
  store i16 0, ptr @b, align 2, !tbaa !9
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv.next.5, 1
  %niter.next.6 = add nuw nsw i64 %niter.next.5, 1
  %arrayidx.7 = getelementptr inbounds i16, ptr %0, i64 %indvars.iv.next.6
  %9 = load i16, ptr %arrayidx.7, align 2, !tbaa !9
  %arrayidx2.7 = getelementptr inbounds [0 x i16], ptr @a, i64 0, i64 %indvars.iv.next.6
  store i16 %9, ptr %arrayidx2.7, align 2, !tbaa !9
  store i16 0, ptr @b, align 2, !tbaa !9
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv.next.6, 1
  %niter.next.7 = add nuw nsw i64 %niter.next.6, 1
  %niter.ncmp.7 = icmp eq i64 %niter.next.7, 4294967288
  br i1 %niter.ncmp.7, label %for.cond.cleanup.unr-lcssa.loopexit, label %for.body, !llvm.loop !13
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.6 (https://github.com/llvm/llvm-project 088f33605d8a61ff519c580a71b1dd57d16a03f8)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"short", !7, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.mustprogress"}
