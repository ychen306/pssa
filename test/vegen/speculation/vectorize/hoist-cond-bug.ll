; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp,simplifycfg -do-versioning | FileCheck %s
; ModuleID = 'bad.ll'
source_filename = "bad.ll"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@b = external global [0 x i16]

; CHECK:    store <8 x i16>

define void @_Z1ev(ptr %a) {
for.body.lr.ph:
  %i = load ptr, ptr null, align 8
  br label %for.body.lr.ph.new

for.body.lr.ph.new:                               ; preds = %for.body.lr.ph
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph.new ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i8, ptr %i, i64 %indvars.iv
  %i1 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %i1 to i16
  %arrayidx2 = getelementptr inbounds [0 x i16], ptr @b, i64 0, i64 %indvars.iv
  store i16 %conv, ptr %arrayidx2, align 2
  %arrayidx5 = getelementptr inbounds [0 x i8], ptr %a, i64 0, i64 %indvars.iv
  store i8 0, ptr %arrayidx5, align 1
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds i8, ptr %i, i64 %indvars.iv.next
  %i2 = load i8, ptr %arrayidx.1, align 1
  %conv.1 = sext i8 %i2 to i16
  %arrayidx2.1 = getelementptr inbounds [0 x i16], ptr @b, i64 0, i64 %indvars.iv.next
  store i16 %conv.1, ptr %arrayidx2.1, align 2
  %indvars.iv.next.1 = add nsw i64 %indvars.iv.next, 1
  %arrayidx.2 = getelementptr inbounds i8, ptr %i, i64 %indvars.iv.next.1
  %i3 = load i8, ptr %arrayidx.2, align 1
  %conv.2 = sext i8 %i3 to i16
  %arrayidx2.2 = getelementptr inbounds [0 x i16], ptr @b, i64 0, i64 %indvars.iv.next.1
  store i16 %conv.2, ptr %arrayidx2.2, align 2
  %indvars.iv.next.2 = add nsw i64 %indvars.iv.next.1, 1
  %arrayidx.3 = getelementptr inbounds i8, ptr %i, i64 %indvars.iv.next.2
  %i4 = load i8, ptr %arrayidx.3, align 1
  %conv.3 = sext i8 %i4 to i16
  %arrayidx2.3 = getelementptr inbounds [0 x i16], ptr @b, i64 0, i64 %indvars.iv.next.2
  store i16 %conv.3, ptr %arrayidx2.3, align 2
  %indvars.iv.next.3 = add nsw i64 %indvars.iv.next.2, 1
  %arrayidx.4 = getelementptr inbounds i8, ptr %i, i64 %indvars.iv.next.3
  %i5 = load i8, ptr %arrayidx.4, align 1
  %conv.4 = sext i8 %i5 to i16
  %arrayidx2.4 = getelementptr inbounds [0 x i16], ptr @b, i64 0, i64 %indvars.iv.next.3
  store i16 %conv.4, ptr %arrayidx2.4, align 2
  %indvars.iv.next.4 = add nsw i64 %indvars.iv.next.3, 1
  %arrayidx.5 = getelementptr inbounds i8, ptr %i, i64 %indvars.iv.next.4
  %i6 = load i8, ptr %arrayidx.5, align 1
  %conv.5 = sext i8 %i6 to i16
  %arrayidx2.5 = getelementptr inbounds [0 x i16], ptr @b, i64 0, i64 %indvars.iv.next.4
  store i16 %conv.5, ptr %arrayidx2.5, align 2
  %indvars.iv.next.5 = add nsw i64 %indvars.iv.next.4, 1
  %arrayidx.6 = getelementptr inbounds i8, ptr %i, i64 %indvars.iv.next.5
  %i7 = load i8, ptr %arrayidx.6, align 1
  %conv.6 = sext i8 %i7 to i16
  %arrayidx2.6 = getelementptr inbounds [0 x i16], ptr @b, i64 0, i64 %indvars.iv.next.5
  store i16 %conv.6, ptr %arrayidx2.6, align 2
  %indvars.iv.next.6 = add nsw i64 %indvars.iv.next.5, 1
  %arrayidx.7 = getelementptr inbounds i8, ptr %i, i64 %indvars.iv.next.6
  %i8 = load i8, ptr %arrayidx.7, align 1
  %conv.7 = sext i8 %i8 to i16
  %arrayidx2.7 = getelementptr inbounds [0 x i16], ptr @b, i64 0, i64 %indvars.iv.next.6
  store i16 %conv.7, ptr %arrayidx2.7, align 2
  br i1 true, label %for.end.loopexit.unr-lcssa, label %for.body

for.end.loopexit.unr-lcssa:                       ; preds = %for.body
  ret void
}
