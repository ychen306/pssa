; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

%class.Vector = type { double, double, double }

define void @_ZN20ComputeNonbondedUtil9calc_selfEP9nonbonded(ptr %params) {
; CHECK-LABEL: @_ZN20ComputeNonbondedUtil9calc_selfEP9nonbonded(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PARAMS:%.*]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[PARAMS]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 8
; CHECK-NEXT:    br label [[HEADER:%.*]]
; CHECK:       header:
; CHECK-NEXT:    [[DOTMU_VEC:%.*]] = phi <2 x double> [ zeroinitializer, [[ENTRY:%.*]] ], [ [[REDUCER_VEC:%.*]], [[LATCH:%.*]] ]
; CHECK-NEXT:    [[VIRIAL_ZZ_02410:%.*]] = phi double [ 0.000000e+00, [[ENTRY]] ], [ [[ADD1231_1:%.*]], [[LATCH]] ]
; CHECK-NEXT:    [[Z1173:%.*]] = getelementptr inbounds [[CLASS_VECTOR:%.*]], ptr [[TMP2]], i64 0, i32 2
; CHECK-NEXT:    [[Z1173_1:%.*]] = getelementptr inbounds [[CLASS_VECTOR]], ptr [[TMP2]], i64 0, i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load double, ptr [[Z1173]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x double> poison, double [[TMP3]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = shufflevector <2 x double> [[TMP4]], <2 x double> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[MUL1230_1_VEC:%.*]] = fmul <2 x double> [[TMP5]], zeroinitializer
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x double> [[MUL1230_1_VEC]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x double> [[MUL1230_1_VEC]], i64 1
; CHECK-NEXT:    [[ADD1231:%.*]] = fadd fast double [[TMP6]], [[VIRIAL_ZZ_02410]]
; CHECK-NEXT:    [[ADD1231_1]] = fadd fast double [[TMP7]], [[ADD1231]]
; CHECK-NEXT:    [[REDUCER_VEC]] = fadd <2 x double> [[DOTMU_VEC]], [[MUL1230_1_VEC]]
; CHECK-NEXT:    [[REDUCER_VEC1:%.*]] = fadd <2 x double> [[DOTMU_VEC]], [[MUL1230_1_VEC]]
; CHECK-NEXT:    br i1 false, label [[TMP8:%.*]], label [[TMP9:%.*]]
; CHECK:       latch:
; CHECK-NEXT:    br i1 [[SHOULD_CONTINUE_MEM_0:%.*]], label [[HEADER]], label [[EXIT:%.*]]
; CHECK:       exit:
; CHECK-NEXT:    br label [[HEADER2:%.*]]
; CHECK:       8:
; CHECK-NEXT:    br label [[TMP10:%.*]]
; CHECK:       9:
; CHECK-NEXT:    br label [[TMP10]]
; CHECK:       10:
; CHECK-NEXT:    [[SHOULD_CONTINUE_MEM_0]] = phi i1 [ false, [[TMP8]] ], [ true, [[TMP9]] ]
; CHECK-NEXT:    br label [[LATCH]]
; CHECK:       header2:
; CHECK-NEXT:    [[TMP11:%.*]] = phi double [ 0.000000e+00, [[EXIT]] ], [ [[REDUCER:%.*]], [[LATCH3:%.*]] ]
; CHECK-NEXT:    [[VIRIAL_ZZ_02410_EPIL:%.*]] = phi double [ [[ADD1231_1]], [[EXIT]] ], [ [[ADD1231_EPIL:%.*]], [[LATCH3]] ]
; CHECK-NEXT:    [[ADD1231_EPIL]] = fadd fast double 1.000000e+00, [[VIRIAL_ZZ_02410_EPIL]]
; CHECK-NEXT:    [[REDUCER]] = fadd double [[TMP11]], 1.000000e+00
; CHECK-NEXT:    br label [[LATCH3]]
; CHECK:       latch3:
; CHECK-NEXT:    br i1 false, label [[HEADER2]], label [[EXIT4:%.*]]
; CHECK:       exit4:
; CHECK-NEXT:    [[ARRAYIDX1253:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i64 10
; CHECK-NEXT:    [[ARRAYIDX1255:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i64 11
; CHECK-NEXT:    [[DOTVEC:%.*]] = load <2 x double>, ptr [[ARRAYIDX1253]], align 8
; CHECK-NEXT:    [[TMP12:%.*]] = extractelement <2 x double> [[DOTVEC]], i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <2 x double> <double 0.000000e+00, double undef>, double [[ADD1231_EPIL]], i64 1
; CHECK-NEXT:    [[ADD1256_VEC:%.*]] = fadd <2 x double> [[DOTVEC]], [[TMP13]]
; CHECK-NEXT:    [[TMP14:%.*]] = call double @llvm.vector.reduce.fadd.v2f64(double -0.000000e+00, <2 x double> [[REDUCER_VEC]])
; CHECK-NEXT:    [[TMP15:%.*]] = fadd double [[REDUCER]], [[TMP12]]
; CHECK-NEXT:    [[TMP16:%.*]] = fadd double [[TMP15]], [[TMP14]]
; CHECK-NEXT:    [[TMP17:%.*]] = insertelement <2 x double> [[ADD1256_VEC]], double [[TMP16]], i64 1
; CHECK-NEXT:    store <2 x double> [[TMP17]], ptr [[ARRAYIDX1253]], align 8
; CHECK-NEXT:    ret void
;
if.end:
  %0 = load ptr, ptr %params, align 8
  br label %if.end108

if.end108:                                        ; preds = %if.end
  %1 = load ptr, ptr %params, align 8
  %2 = load ptr, ptr %1, align 8
  br label %for.body1156.preheader.new

for.body1156.preheader.new:                       ; preds = %if.end108
  br label %for.body1156

for.cond.cleanup1155.loopexit.unr-lcssa.loopexit: ; preds = %for.body1156
  %virial_zz.02410.unr.ph = phi double [ %add1231.1, %for.body1156 ]
  br label %for.body1156.epil.preheader

for.body1156.epil.preheader:                      ; preds = %for.cond.cleanup1155.loopexit.unr-lcssa.loopexit
  br label %for.body1156.epil

for.body1156.epil:                                ; preds = %for.body1156.epil, %for.body1156.epil.preheader
  %virial_zz.02410.epil = phi double [ %virial_zz.02410.unr.ph, %for.body1156.epil.preheader ], [ %add1231.epil, %for.body1156.epil ]
  %add1231.epil = fadd fast double 1.000000e+00, %virial_zz.02410.epil
  br i1 false, label %for.body1156.epil, label %for.cond.cleanup1155.loopexit.epilog-lcssa

for.cond.cleanup1155.loopexit.epilog-lcssa:       ; preds = %for.body1156.epil
  %add1231.lcssa.ph2580 = phi double [ %add1231.epil, %for.body1156.epil ]
  br label %for.cond.cleanup1155

for.cond.cleanup1155:                             ; preds = %for.cond.cleanup1155.loopexit.epilog-lcssa
  %arrayidx1253 = getelementptr inbounds double, ptr %0, i64 10
  %3 = load double, ptr %arrayidx1253, align 8
  %add1254 = fadd fast double %3, 0.000000e+00
  store double %add1254, ptr %arrayidx1253, align 8
  %arrayidx1255 = getelementptr inbounds double, ptr %0, i64 11
  %4 = load double, ptr %arrayidx1255, align 8
  %add1256 = fadd fast double %4, %add1231.lcssa.ph2580
  store double %add1256, ptr %arrayidx1255, align 8
  ret void

for.body1156:                                     ; preds = %for.body1156, %for.body1156.preheader.new
  %virial_zz.02410 = phi double [ 0.000000e+00, %for.body1156.preheader.new ], [ %add1231.1, %for.body1156 ]
  %z1173 = getelementptr inbounds %class.Vector, ptr %2, i64 0, i32 2
  %5 = load double, ptr %z1173, align 8
  %mul1230 = fmul fast double %5, 0.000000e+00
  %add1231 = fadd fast double %mul1230, %virial_zz.02410
  %z1173.1 = getelementptr inbounds %class.Vector, ptr %2, i64 0, i32 2
  %6 = load double, ptr %z1173.1, align 8
  %mul1230.1 = fmul fast double %6, 0.000000e+00
  %add1231.1 = fadd fast double %mul1230.1, %add1231
  br i1 false, label %for.cond.cleanup1155.loopexit.unr-lcssa.loopexit, label %for.body1156

; uselistorder directives
  uselistorder double %add1231.1, { 1, 0 }
}
