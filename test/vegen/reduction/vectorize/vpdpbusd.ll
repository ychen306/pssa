; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp,adce | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@data = local_unnamed_addr global [4 x i8] zeroinitializer, align 1
@kernel = local_unnamed_addr global [4 x [4 x i8]] zeroinitializer, align 16
@output = local_unnamed_addr global [4 x i32] zeroinitializer, align 16

; Function Attrs: nofree norecurse nosync nounwind ssp uwtable
define void @dot() local_unnamed_addr #0 {
; CHECK-LABEL: @dot(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ARRAYIDX11_PROMOTED_1_VEC:%.*]] = load <4 x i32>, ptr @output, align 16
; CHECK-NEXT:    [[I2_VEC:%.*]] = load <4 x i8>, ptr @data, align 1
; CHECK-NEXT:    [[I3_VEC:%.*]] = load <16 x i8>, ptr @kernel, align 16
; CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <4 x i8> [[I2_VEC]], <4 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast <16 x i8> [[TMP0]] to <4 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i8> [[I3_VEC]] to <4 x i32>
; CHECK-NEXT:    [[BINARY_REDUCER_VEC:%.*]] = call <4 x i32> @llvm.x86.avx512.vpdpbusd.128(<4 x i32> [[ARRAYIDX11_PROMOTED_1_VEC]], <4 x i32> [[TMP1]], <4 x i32> [[TMP2]])
; CHECK-NEXT:    store <4 x i32> [[BINARY_REDUCER_VEC]], ptr @output, align 16
; CHECK-NEXT:    ret void
;
entry:
  %arrayidx11.promoted = load i32, ptr @output, align 16, !tbaa !5
  %arrayidx11.promoted.1 = load i32, ptr getelementptr inbounds ([4 x i32], ptr @output, i64 0, i64 1), align 4, !tbaa !5
  %arrayidx11.promoted.2 = load i32, ptr getelementptr inbounds ([4 x i32], ptr @output, i64 0, i64 2), align 8, !tbaa !5
  %arrayidx11.promoted.3 = load i32, ptr getelementptr inbounds ([4 x i32], ptr @output, i64 0, i64 3), align 4, !tbaa !5
  %i = load i8, ptr @data, align 1, !tbaa !9
  %conv = zext i8 %i to i32
  %i1 = load i8, ptr @kernel, align 16, !tbaa !9
  %conv9 = sext i8 %i1 to i32
  %mul = mul nsw i32 %conv9, %conv
  %add = add nsw i32 %mul, %arrayidx11.promoted
  %i2 = load i8, ptr getelementptr inbounds ([4 x i8], ptr @data, i64 0, i64 1), align 1, !tbaa !9
  %conv.1 = zext i8 %i2 to i32
  %i3 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 0, i64 1), align 1, !tbaa !9
  %conv9.1 = sext i8 %i3 to i32
  %mul.1 = mul nsw i32 %conv9.1, %conv.1
  %add.1 = add nsw i32 %mul.1, %add
  %i4 = load i8, ptr getelementptr inbounds ([4 x i8], ptr @data, i64 0, i64 2), align 1, !tbaa !9
  %conv.2 = zext i8 %i4 to i32
  %i5 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 0, i64 2), align 2, !tbaa !9
  %conv9.2 = sext i8 %i5 to i32
  %mul.2 = mul nsw i32 %conv9.2, %conv.2
  %add.2 = add nsw i32 %mul.2, %add.1
  %i6 = load i8, ptr getelementptr inbounds ([4 x i8], ptr @data, i64 0, i64 3), align 1, !tbaa !9
  %conv.3 = zext i8 %i6 to i32
  %i7 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 0, i64 3), align 1, !tbaa !9
  %conv9.3 = sext i8 %i7 to i32
  %mul.3 = mul nsw i32 %conv9.3, %conv.3
  %add.3 = add nsw i32 %mul.3, %add.2
  store i32 %add.3, ptr @output, align 16, !tbaa !5
  %i9 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 1, i64 0), align 4, !tbaa !9
  %conv9.129 = sext i8 %i9 to i32
  %mul.130 = mul nsw i32 %conv9.129, %conv
  %add.131 = add nsw i32 %mul.130, %arrayidx11.promoted.1
  %i11 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 1, i64 1), align 1, !tbaa !9
  %conv9.1.1 = sext i8 %i11 to i32
  %mul.1.1 = mul nsw i32 %conv9.1.1, %conv.1
  %add.1.1 = add nsw i32 %mul.1.1, %add.131
  %i13 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 1, i64 2), align 2, !tbaa !9
  %conv9.2.1 = sext i8 %i13 to i32
  %mul.2.1 = mul nsw i32 %conv9.2.1, %conv.2
  %add.2.1 = add nsw i32 %mul.2.1, %add.1.1
  %i15 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 1, i64 3), align 1, !tbaa !9
  %conv9.3.1 = sext i8 %i15 to i32
  %mul.3.1 = mul nsw i32 %conv9.3.1, %conv.3
  %add.3.1 = add nsw i32 %mul.3.1, %add.2.1
  store i32 %add.3.1, ptr getelementptr inbounds ([4 x i32], ptr @output, i64 0, i64 1), align 4, !tbaa !5
  %i17 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 2, i64 0), align 8, !tbaa !9
  %conv9.234 = sext i8 %i17 to i32
  %mul.235 = mul nsw i32 %conv9.234, %conv
  %add.236 = add nsw i32 %mul.235, %arrayidx11.promoted.2
  %i19 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 2, i64 1), align 1, !tbaa !9
  %conv9.1.2 = sext i8 %i19 to i32
  %mul.1.2 = mul nsw i32 %conv9.1.2, %conv.1
  %add.1.2 = add nsw i32 %mul.1.2, %add.236
  %i21 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 2, i64 2), align 2, !tbaa !9
  %conv9.2.2 = sext i8 %i21 to i32
  %mul.2.2 = mul nsw i32 %conv9.2.2, %conv.2
  %add.2.2 = add nsw i32 %mul.2.2, %add.1.2
  %i23 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 2, i64 3), align 1, !tbaa !9
  %conv9.3.2 = sext i8 %i23 to i32
  %mul.3.2 = mul nsw i32 %conv9.3.2, %conv.3
  %add.3.2 = add nsw i32 %mul.3.2, %add.2.2
  store i32 %add.3.2, ptr getelementptr inbounds ([4 x i32], ptr @output, i64 0, i64 2), align 8, !tbaa !5
  %i25 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 3, i64 0), align 4, !tbaa !9
  %conv9.339 = sext i8 %i25 to i32
  %mul.340 = mul nsw i32 %conv9.339, %conv
  %add.341 = add nsw i32 %mul.340, %arrayidx11.promoted.3
  %i27 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 3, i64 1), align 1, !tbaa !9
  %conv9.1.3 = sext i8 %i27 to i32
  %mul.1.3 = mul nsw i32 %conv9.1.3, %conv.1
  %add.1.3 = add nsw i32 %mul.1.3, %add.341
  %i29 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 3, i64 2), align 2, !tbaa !9
  %conv9.2.3 = sext i8 %i29 to i32
  %mul.2.3 = mul nsw i32 %conv9.2.3, %conv.2
  %add.2.3 = add nsw i32 %mul.2.3, %add.1.3
  %i31 = load i8, ptr getelementptr inbounds ([4 x [4 x i8]], ptr @kernel, i64 0, i64 3, i64 3), align 1, !tbaa !9
  %conv9.3.3 = sext i8 %i31 to i32
  %mul.3.3 = mul nsw i32 %conv9.3.3, %conv.3
  %add.3.3 = add nsw i32 %mul.3.3, %add.2.3
  store i32 %add.3.3, ptr getelementptr inbounds ([4 x i32], ptr @output, i64 0, i64 3), align 4, !tbaa !5
  ret void
}

attributes #0 = { nofree norecurse nosync nounwind ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 12f9c7b27063a4a487621f48c167e4f88de6d297)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!7, !7, i64 0}
