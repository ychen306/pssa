; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=test-vector-codegen,adce,simplifycfg -rdx-to-pack=add.3.lcssa.lcssa -p i3,i,i1,i2 -remove-dead-insts | FileCheck %s
; ModuleID = 'sum-2d-interchanged.ll'
source_filename = "sum-2d-interchanged.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

; CHECK-LABEL: @sum(
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[HEADER:.*]]
; CHECK:       [[HEADER]]:
; CHECK-DAG:     [[DOTMU_VEC:%.*]] = phi <4 x i32> [ zeroinitializer, [[ENTRY:%.*]] ], [ [[REC_RDX_VEC6:%.*]], %[[EXIT3:.*]] ]
; CHECK-DAG:     [[INDVARS_IV20:%.*]] = phi i64 [ 0, [[ENTRY]] ], [ [[INDVARS_IV_NEXT21_3:%.*]], %[[EXIT3]] ]
; CHECK-NEXT:    br label %[[HEADER1:.*]]
; CHECK:       [[EXIT:.*]]:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> [[REC_RDX_VEC6]])
; CHECK-NEXT:    ret i32 [[TMP0]]
; CHECK:       [[HEADER1]]:
; CHECK-DAG:     [[DOTMU_VEC5:%.*]] = phi <4 x i32> [ zeroinitializer, %[[HEADER]] ], [ [[REC_RDX_VEC:%.*]], %[[HEADER1]] ]
; CHECK-DAG:     [[INDVARS_IV:%.*]] = phi i64 [ 0, %[[HEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], %[[HEADER1]] ]
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds [256 x i32], ptr [[A:%.*]], i64 [[INDVARS_IV]], i64 [[INDVARS_IV20]]
; CHECK-NEXT:    [[I_VEC:%.*]] = load <4 x i32>, ptr [[ARRAYIDX6]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 256
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <4 x i32> [[I_VEC]], <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
; CHECK-NEXT:    [[REC_RDX_VEC]] = add <4 x i32> [[DOTMU_VEC5]], [[TMP1]]
; CHECK-NEXT:    [[DOT:%.*]] = select i1 [[EXITCOND_NOT]], i1 false, i1 true
; CHECK-NEXT:    br i1 [[DOT]], label %[[HEADER1]], label %[[EXIT3]]
; CHECK:       [[EXIT3]]:
; CHECK-NEXT:    [[INDVARS_IV_NEXT21_3]] = add nuw nsw i64 [[INDVARS_IV20]], 4
; CHECK-NEXT:    [[EXITCOND23_3_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT21_3]], 256
; CHECK-NEXT:    [[REC_RDX_VEC6]] = add <4 x i32> [[DOTMU_VEC]], [[REC_RDX_VEC]]
; CHECK-NEXT:    [[DOT8:%.*]] = select i1 [[EXITCOND23_3_NOT]], i1 false, i1 true
; CHECK-NEXT:    br i1 [[DOT8]], label %[[HEADER]], label %[[EXIT]]

; Function Attrs: argmemonly nofree norecurse nosync nounwind readonly ssp uwtable
define i32 @sum(i32 noundef %n, ptr nocapture noundef readonly %a) local_unnamed_addr #0 {
entry:
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup3.3, %entry
  %indvars.iv20 = phi i64 [ 0, %entry ], [ %indvars.iv.next21.3, %for.cond.cleanup3.3 ]
  %s.017 = phi i32 [ 0, %entry ], [ %add.3.lcssa, %for.cond.cleanup3.3 ]
  br label %for.body4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup3.3
  %add.3.lcssa.lcssa = phi i32 [ %add.3.lcssa, %for.cond.cleanup3.3 ]
  ret i32 %add.3.lcssa.lcssa

for.cond.cleanup3:                                ; preds = %for.body4
  %add.lcssa = phi i32 [ %add, %for.body4 ]
  %indvars.iv.next21 = or i64 %indvars.iv20, 1
  br label %for.body4.1

for.body4.1:                                      ; preds = %for.body4.1, %for.cond.cleanup3
  %indvars.iv.1 = phi i64 [ 0, %for.cond.cleanup3 ], [ %indvars.iv.next.1, %for.body4.1 ]
  %s.115.1 = phi i32 [ %add.lcssa, %for.cond.cleanup3 ], [ %add.1, %for.body4.1 ]
  %arrayidx6.1 = getelementptr inbounds [256 x i32], ptr %a, i64 %indvars.iv.1, i64 %indvars.iv.next21
  %i = load i32, ptr %arrayidx6.1, align 4, !tbaa !5
  %add.1 = add nsw i32 %i, %s.115.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1.not = icmp eq i64 %indvars.iv.next.1, 256
  br i1 %exitcond.1.not, label %for.cond.cleanup3.1, label %for.body4.1, !llvm.loop !9

for.cond.cleanup3.1:                              ; preds = %for.body4.1
  %add.1.lcssa = phi i32 [ %add.1, %for.body4.1 ]
  %indvars.iv.next21.1 = or i64 %indvars.iv20, 2
  br label %for.body4.2

for.body4.2:                                      ; preds = %for.body4.2, %for.cond.cleanup3.1
  %indvars.iv.2 = phi i64 [ 0, %for.cond.cleanup3.1 ], [ %indvars.iv.next.2, %for.body4.2 ]
  %s.115.2 = phi i32 [ %add.1.lcssa, %for.cond.cleanup3.1 ], [ %add.2, %for.body4.2 ]
  %arrayidx6.2 = getelementptr inbounds [256 x i32], ptr %a, i64 %indvars.iv.2, i64 %indvars.iv.next21.1
  %i1 = load i32, ptr %arrayidx6.2, align 4, !tbaa !5
  %add.2 = add nsw i32 %i1, %s.115.2
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2.not = icmp eq i64 %indvars.iv.next.2, 256
  br i1 %exitcond.2.not, label %for.cond.cleanup3.2, label %for.body4.2, !llvm.loop !9

for.cond.cleanup3.2:                              ; preds = %for.body4.2
  %add.2.lcssa = phi i32 [ %add.2, %for.body4.2 ]
  %indvars.iv.next21.2 = or i64 %indvars.iv20, 3
  br label %for.body4.3

for.body4.3:                                      ; preds = %for.body4.3, %for.cond.cleanup3.2
  %indvars.iv.3 = phi i64 [ 0, %for.cond.cleanup3.2 ], [ %indvars.iv.next.3, %for.body4.3 ]
  %s.115.3 = phi i32 [ %add.2.lcssa, %for.cond.cleanup3.2 ], [ %add.3, %for.body4.3 ]
  %arrayidx6.3 = getelementptr inbounds [256 x i32], ptr %a, i64 %indvars.iv.3, i64 %indvars.iv.next21.2
  %i2 = load i32, ptr %arrayidx6.3, align 4, !tbaa !5
  %add.3 = add nsw i32 %i2, %s.115.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3.not = icmp eq i64 %indvars.iv.next.3, 256
  br i1 %exitcond.3.not, label %for.cond.cleanup3.3, label %for.body4.3, !llvm.loop !9

for.cond.cleanup3.3:                              ; preds = %for.body4.3
  %add.3.lcssa = phi i32 [ %add.3, %for.body4.3 ]
  %indvars.iv.next21.3 = add nuw nsw i64 %indvars.iv20, 4
  %exitcond23.3.not = icmp eq i64 %indvars.iv.next21.3, 256
  br i1 %exitcond23.3.not, label %for.cond.cleanup, label %for.cond1.preheader, !llvm.loop !12

for.body4:                                        ; preds = %for.body4, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body4 ]
  %s.115 = phi i32 [ %s.017, %for.cond1.preheader ], [ %add, %for.body4 ]
  %arrayidx6 = getelementptr inbounds [256 x i32], ptr %a, i64 %indvars.iv, i64 %indvars.iv20
  %i3 = load i32, ptr %arrayidx6, align 4, !tbaa !5
  %add = add nsw i32 %i3, %s.115
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond.not, label %for.cond.cleanup3, label %for.body4, !llvm.loop !9
}

attributes #0 = { argmemonly nofree norecurse nosync nounwind readonly ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 12f9c7b27063a4a487621f48c167e4f88de6d297)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !10, !11}
