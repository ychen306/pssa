; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=test-vector-codegen,adce,simplifycfg,indvars,gvn -p add.1.lcssa,add.1.1.lcssa,add.1.2.lcssa,add.1.3.lcssa/bottom-up -p storeOf:add.1.lcssa,storeOf:add.1.1.lcssa,storeOf:add.1.2.lcssa,storeOf:add.1.3.lcssa -p arrayidx11.promoted,arrayidx11.promoted.1,arrayidx11.promoted.2,arrayidx11.promoted.3 -p i15,i13,i3,i1,i7,i5,i11,i9 -p i14,i12,i2,i,i6,i4,i10,i8 -include-vpdpwssd=true -include-pmaddwd=false | FileCheck %s

target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@a = local_unnamed_addr global [4 x i16] zeroinitializer, align 2
@b = local_unnamed_addr global [4 x [256 x i16]] zeroinitializer, align 16
@c = local_unnamed_addr global [4 x i32] zeroinitializer, align 16

; CHECK-LABEL: @foo(
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[ARRAYIDX11_PROMOTED_1_VEC:%.*]] = load <4 x i32>, ptr @c, align 16
; CHECK-NEXT:    br label %[[HEADER:.*]]
; CHECK:       [[HEADER]]:
; CHECK-DAG:    [[INDVARS_IV:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDVARS_IV_NEXT_1:%.*]], %[[HEADER]] ]
; CHECK-DAG:    [[DOTMU_VEC:%.*]] = phi <4 x i32> [ zeroinitializer, %[[ENTRY]] ], [ [[BINARY_REDUCER_VEC:%.*]], %[[HEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT:%.*]] = or i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[ARRAYIDX_1:%.*]] = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <8 x ptr> undef, ptr [[ARRAYIDX_1]], i64 0
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <8 x ptr> [[TMP0]], ptr [[ARRAYIDX]], i64 1
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <8 x ptr> [[TMP1]], ptr [[ARRAYIDX_1]], i64 2
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <8 x ptr> [[TMP2]], ptr [[ARRAYIDX]], i64 3
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <8 x ptr> [[TMP3]], ptr [[ARRAYIDX_1]], i64 4
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <8 x ptr> [[TMP4]], ptr [[ARRAYIDX]], i64 5
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <8 x ptr> [[TMP5]], ptr [[ARRAYIDX_1]], i64 6
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <8 x ptr> [[TMP6]], ptr [[ARRAYIDX]], i64 7
; CHECK-NEXT:    [[I14_VEC:%.*]] = call <8 x i16> @llvm.masked.gather.v8i16.v8p0(<8 x ptr> [[TMP7]], i32 2, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i16> undef)
; CHECK-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[ARRAYIDX8_1:%.*]] = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 0, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[ARRAYIDX8_1_1:%.*]] = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 1, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[ARRAYIDX8_131:%.*]] = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 1, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[ARRAYIDX8_1_2:%.*]] = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 2, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[ARRAYIDX8_2:%.*]] = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 2, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[ARRAYIDX8_1_3:%.*]] = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 3, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[ARRAYIDX8_3:%.*]] = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 3, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <8 x ptr> undef, ptr [[ARRAYIDX8_1]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <8 x ptr> [[TMP8]], ptr [[ARRAYIDX8]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <8 x ptr> [[TMP9]], ptr [[ARRAYIDX8_1_1]], i64 2
; CHECK-NEXT:    [[TMP11:%.*]] = insertelement <8 x ptr> [[TMP10]], ptr [[ARRAYIDX8_131]], i64 3
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <8 x ptr> [[TMP11]], ptr [[ARRAYIDX8_1_2]], i64 4
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <8 x ptr> [[TMP12]], ptr [[ARRAYIDX8_2]], i64 5
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <8 x ptr> [[TMP13]], ptr [[ARRAYIDX8_1_3]], i64 6
; CHECK-NEXT:    [[TMP15:%.*]] = insertelement <8 x ptr> [[TMP14]], ptr [[ARRAYIDX8_3]], i64 7
; CHECK-NEXT:    [[I15_VEC:%.*]] = call <8 x i16> @llvm.masked.gather.v8i16.v8p0(<8 x ptr> [[TMP15]], i32 2, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i16> undef)
; CHECK-NEXT:    [[INDVARS_IV_NEXT_1]] = add nuw nsw i64 [[INDVARS_IV]], 2
; CHECK-NEXT:    [[EXITCOND_1_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT_1]], 256
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast <8 x i16> [[I15_VEC]] to <4 x i32>
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast <8 x i16> [[I14_VEC]] to <4 x i32>
; CHECK-NEXT:    [[BINARY_REDUCER_VEC]] = call <4 x i32> @llvm.x86.avx512.vpdpwssd.128(<4 x i32> [[DOTMU_VEC]], <4 x i32> [[TMP16]], <4 x i32> [[TMP17]])
; CHECK-NEXT:    [[DOT:%.*]] = select i1 [[EXITCOND_1_NOT]], i1 false, i1 true
; CHECK-NEXT:    br i1 [[DOT]], label %[[HEADER]], label %[[EXIT:.*]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    [[BINARY_REDUCER_VEC1:%.*]] = add <4 x i32> [[ARRAYIDX11_PROMOTED_1_VEC]], [[BINARY_REDUCER_VEC]]
; CHECK-NEXT:    store <4 x i32> [[BINARY_REDUCER_VEC1]], ptr @c, align 16
; CHECK-NEXT:    ret void

; Function Attrs: nofree norecurse nosync nounwind ssp uwtable
define void @foo() local_unnamed_addr #0 {
entry:
  %arrayidx11.promoted = load i32, ptr @c, align 16, !tbaa !5
  br label %for.body4

for.cond.cleanup3:                                ; preds = %for.body4
  %add.1.lcssa = phi i32 [ %add.1, %for.body4 ]
  store i32 %add.1.lcssa, ptr @c, align 16, !tbaa !5
  %arrayidx11.promoted.1 = load i32, ptr getelementptr inbounds ([4 x i32], ptr @c, i64 0, i64 1), align 4, !tbaa !5
  br label %for.body4.1

for.body4.1:                                      ; preds = %for.body4.1, %for.cond.cleanup3
  %indvars.iv.1 = phi i64 [ 0, %for.cond.cleanup3 ], [ %indvars.iv.next.1.1, %for.body4.1 ]
  %add2122.1 = phi i32 [ %arrayidx11.promoted.1, %for.cond.cleanup3 ], [ %add.1.1, %for.body4.1 ]
  %arrayidx.129 = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 %indvars.iv.1
  %i = load i16, ptr %arrayidx.129, align 2, !tbaa !9
  %conv.130 = sext i16 %i to i32
  %arrayidx8.131 = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 1, i64 %indvars.iv.1
  %i1 = load i16, ptr %arrayidx8.131, align 4, !tbaa !9
  %conv9.132 = sext i16 %i1 to i32
  %mul.133 = mul nsw i32 %conv9.132, %conv.130
  %add.134 = add nsw i32 %mul.133, %add2122.1
  %indvars.iv.next.135 = or i64 %indvars.iv.1, 1
  %arrayidx.1.1 = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 %indvars.iv.next.135
  %i2 = load i16, ptr %arrayidx.1.1, align 2, !tbaa !9
  %conv.1.1 = sext i16 %i2 to i32
  %arrayidx8.1.1 = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 1, i64 %indvars.iv.next.135
  %i3 = load i16, ptr %arrayidx8.1.1, align 2, !tbaa !9
  %conv9.1.1 = sext i16 %i3 to i32
  %mul.1.1 = mul nsw i32 %conv9.1.1, %conv.1.1
  %add.1.1 = add nsw i32 %mul.1.1, %add.134
  %indvars.iv.next.1.1 = add nuw nsw i64 %indvars.iv.1, 2
  %exitcond.1.1.not = icmp eq i64 %indvars.iv.next.1.1, 256
  br i1 %exitcond.1.1.not, label %for.cond.cleanup3.1, label %for.body4.1, !llvm.loop !11

for.cond.cleanup3.1:                              ; preds = %for.body4.1
  %add.1.1.lcssa = phi i32 [ %add.1.1, %for.body4.1 ]
  store i32 %add.1.1.lcssa, ptr getelementptr inbounds ([4 x i32], ptr @c, i64 0, i64 1), align 4, !tbaa !5
  %arrayidx11.promoted.2 = load i32, ptr getelementptr inbounds ([4 x i32], ptr @c, i64 0, i64 2), align 8, !tbaa !5
  br label %for.body4.2

for.body4.2:                                      ; preds = %for.body4.2, %for.cond.cleanup3.1
  %indvars.iv.2 = phi i64 [ 0, %for.cond.cleanup3.1 ], [ %indvars.iv.next.1.2, %for.body4.2 ]
  %add2122.2 = phi i32 [ %arrayidx11.promoted.2, %for.cond.cleanup3.1 ], [ %add.1.2, %for.body4.2 ]
  %arrayidx.2 = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 %indvars.iv.2
  %i4 = load i16, ptr %arrayidx.2, align 2, !tbaa !9
  %conv.2 = sext i16 %i4 to i32
  %arrayidx8.2 = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 2, i64 %indvars.iv.2
  %i5 = load i16, ptr %arrayidx8.2, align 4, !tbaa !9
  %conv9.2 = sext i16 %i5 to i32
  %mul.2 = mul nsw i32 %conv9.2, %conv.2
  %add.2 = add nsw i32 %mul.2, %add2122.2
  %indvars.iv.next.2 = or i64 %indvars.iv.2, 1
  %arrayidx.1.2 = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 %indvars.iv.next.2
  %i6 = load i16, ptr %arrayidx.1.2, align 2, !tbaa !9
  %conv.1.2 = sext i16 %i6 to i32
  %arrayidx8.1.2 = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 2, i64 %indvars.iv.next.2
  %i7 = load i16, ptr %arrayidx8.1.2, align 2, !tbaa !9
  %conv9.1.2 = sext i16 %i7 to i32
  %mul.1.2 = mul nsw i32 %conv9.1.2, %conv.1.2
  %add.1.2 = add nsw i32 %mul.1.2, %add.2
  %indvars.iv.next.1.2 = add nuw nsw i64 %indvars.iv.2, 2
  %exitcond.1.2.not = icmp eq i64 %indvars.iv.next.1.2, 256
  br i1 %exitcond.1.2.not, label %for.cond.cleanup3.2, label %for.body4.2, !llvm.loop !11

for.cond.cleanup3.2:                              ; preds = %for.body4.2
  %add.1.2.lcssa = phi i32 [ %add.1.2, %for.body4.2 ]
  store i32 %add.1.2.lcssa, ptr getelementptr inbounds ([4 x i32], ptr @c, i64 0, i64 2), align 8, !tbaa !5
  %arrayidx11.promoted.3 = load i32, ptr getelementptr inbounds ([4 x i32], ptr @c, i64 0, i64 3), align 4, !tbaa !5
  br label %for.body4.3

for.body4.3:                                      ; preds = %for.body4.3, %for.cond.cleanup3.2
  %indvars.iv.3 = phi i64 [ 0, %for.cond.cleanup3.2 ], [ %indvars.iv.next.1.3, %for.body4.3 ]
  %add2122.3 = phi i32 [ %arrayidx11.promoted.3, %for.cond.cleanup3.2 ], [ %add.1.3, %for.body4.3 ]
  %arrayidx.3 = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 %indvars.iv.3
  %i8 = load i16, ptr %arrayidx.3, align 2, !tbaa !9
  %conv.3 = sext i16 %i8 to i32
  %arrayidx8.3 = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 3, i64 %indvars.iv.3
  %i9 = load i16, ptr %arrayidx8.3, align 4, !tbaa !9
  %conv9.3 = sext i16 %i9 to i32
  %mul.3 = mul nsw i32 %conv9.3, %conv.3
  %add.3 = add nsw i32 %mul.3, %add2122.3
  %indvars.iv.next.3 = or i64 %indvars.iv.3, 1
  %arrayidx.1.3 = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 %indvars.iv.next.3
  %i10 = load i16, ptr %arrayidx.1.3, align 2, !tbaa !9
  %conv.1.3 = sext i16 %i10 to i32
  %arrayidx8.1.3 = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 3, i64 %indvars.iv.next.3
  %i11 = load i16, ptr %arrayidx8.1.3, align 2, !tbaa !9
  %conv9.1.3 = sext i16 %i11 to i32
  %mul.1.3 = mul nsw i32 %conv9.1.3, %conv.1.3
  %add.1.3 = add nsw i32 %mul.1.3, %add.3
  %indvars.iv.next.1.3 = add nuw nsw i64 %indvars.iv.3, 2
  %exitcond.1.3.not = icmp eq i64 %indvars.iv.next.1.3, 256
  br i1 %exitcond.1.3.not, label %for.cond.cleanup3.3, label %for.body4.3, !llvm.loop !11

for.cond.cleanup3.3:                              ; preds = %for.body4.3
  %add.1.3.lcssa = phi i32 [ %add.1.3, %for.body4.3 ]
  store i32 %add.1.3.lcssa, ptr getelementptr inbounds ([4 x i32], ptr @c, i64 0, i64 3), align 4, !tbaa !5
  ret void

for.body4:                                        ; preds = %for.body4, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.1, %for.body4 ]
  %add2122 = phi i32 [ %arrayidx11.promoted, %entry ], [ %add.1, %for.body4 ]
  %arrayidx = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 %indvars.iv
  %i12 = load i16, ptr %arrayidx, align 2, !tbaa !9
  %conv = sext i16 %i12 to i32
  %arrayidx8 = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 0, i64 %indvars.iv
  %i13 = load i16, ptr %arrayidx8, align 4, !tbaa !9
  %conv9 = sext i16 %i13 to i32
  %mul = mul nsw i32 %conv9, %conv
  %add = add nsw i32 %mul, %add2122
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [4 x i16], ptr @a, i64 0, i64 %indvars.iv.next
  %i14 = load i16, ptr %arrayidx.1, align 2, !tbaa !9
  %conv.1 = sext i16 %i14 to i32
  %arrayidx8.1 = getelementptr inbounds [4 x [256 x i16]], ptr @b, i64 0, i64 0, i64 %indvars.iv.next
  %i15 = load i16, ptr %arrayidx8.1, align 2, !tbaa !9
  %conv9.1 = sext i16 %i15 to i32
  %mul.1 = mul nsw i32 %conv9.1, %conv.1
  %add.1 = add nsw i32 %mul.1, %add
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %exitcond.1.not = icmp eq i64 %indvars.iv.next.1, 256
  br i1 %exitcond.1.not, label %for.cond.cleanup3, label %for.body4, !llvm.loop !11
}

attributes #0 = { nofree norecurse nosync nounwind ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 12f9c7b27063a4a487621f48c167e4f88de6d297)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"short", !7, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.unroll.disable"}
