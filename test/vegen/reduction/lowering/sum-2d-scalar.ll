; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -load-pass-plugin /Users/tom/workspace/pssa/build/lib/libPSSA.so %s -S -passes=test-vector-codegen,adce,simplifycfg -rdx-to-pack=add.3.lcssa.lcssa -disable-reduction-packing | FileCheck %s

target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

; CHECK-LABEL: @sum(
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[HEADER:.*]]
; CHECK:       [[HEADER]]:
; CHECK-NOT:     br
; CHECK:         [[INDVARS_IV20:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDVARS_IV_NEXT21:%.*]], %[[EXIT3:.*]] ]
; CHECK-NEXT:    br label %[[HEADER1:.*]]
; CHECK:       [[EXIT:.*]]:
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <4 x i32>
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <4 x i32>
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32>
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32>
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> [[TMP7]])
; CHECK-NEXT:    ret i32 [[TMP8]]
; CHECK:       [[HEADER1]]:
; CHECK-NOT:     br
; CHECK:         [[INDVARS_IV:%.*]] = phi i64 [ 0, %[[HEADER]] ], [ [[INDVARS_IV_NEXT_3:%.*]], %[[HEADER1]] ]
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds [256 x i32], ptr [[A:%.*]], i64 [[INDVARS_IV20]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[I:%.*]] = load i32, ptr [[ARRAYIDX6]], align 4, !tbaa [[TBAA5:![0-9]+]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT:%.*]] = or i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[ARRAYIDX6_1:%.*]] = getelementptr inbounds [256 x i32], ptr [[A]], i64 [[INDVARS_IV20]], i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[I1:%.*]] = load i32, ptr [[ARRAYIDX6_1]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_1:%.*]] = or i64 [[INDVARS_IV]], 2
; CHECK-NEXT:    [[ARRAYIDX6_2:%.*]] = getelementptr inbounds [256 x i32], ptr [[A]], i64 [[INDVARS_IV20]], i64 [[INDVARS_IV_NEXT_1]]
; CHECK-NEXT:    [[I2:%.*]] = load i32, ptr [[ARRAYIDX6_2]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_2:%.*]] = or i64 [[INDVARS_IV]], 3
; CHECK-NEXT:    [[ARRAYIDX6_3:%.*]] = getelementptr inbounds [256 x i32], ptr [[A]], i64 [[INDVARS_IV20]], i64 [[INDVARS_IV_NEXT_2]]
; CHECK-NEXT:    [[I3:%.*]] = load i32, ptr [[ARRAYIDX6_3]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_3]] = add nuw nsw i64 [[INDVARS_IV]], 4
; CHECK-NEXT:    [[EXITCOND_3_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT_3]], 256
; CHECK-DAG:     [[TMP13:%.*]] = add i32 [[TMP12:%.*]], [[I2]]{{$}}
; CHECK-DAG:     [[TMP14:%.*]] = add i32 [[TMP11:%.*]], [[I3]]{{$}}
; CHECK-DAG:     [[TMP15:%.*]] = add i32 [[TMP10:%.*]], [[I]]{{$}}
; CHECK-DAG:     [[TMP16:%.*]] = add i32 [[TMP9:%.*]], [[I1]]{{$}}
; CHECK-NEXT:    [[DOT:%.*]] = select i1 [[EXITCOND_3_NOT]], i1 false, i1 true
; CHECK-NEXT:    br i1 [[DOT]], label %[[HEADER1]], label %[[EXIT3]]
; CHECK:       [[EXIT3]]:
; CHECK-NEXT:    [[INDVARS_IV_NEXT21]] = add nuw nsw i64 [[INDVARS_IV20]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT21]], 256
; CHECK-DAG:     [[TMP17:%.*]] = add i32 [[TMP3:%.*]], [[TMP13]]{{$}} 
; CHECK-DAG:     [[TMP18:%.*]] = add i32 [[TMP2:%.*]], [[TMP14]]{{$}}
; CHECK-DAG:     [[TMP19:%.*]] = add i32 [[TMP1:%.*]], [[TMP15]]{{$}}
; CHECK-DAG:     [[TMP20:%.*]] = add i32 [[TMP0:%.*]], [[TMP16]]{{$}}
; CHECK-NEXT:    [[DOT6:%.*]] = select i1 [[EXITCOND_NOT]], i1 false, i1 true
; CHECK-NEXT:    br i1 [[DOT6]], label %[[HEADER]], label %[[EXIT]]

; Function Attrs: argmemonly nofree norecurse nosync nounwind readonly ssp uwtable
define i32 @sum(i32 noundef %n, ptr nocapture noundef readonly %a) local_unnamed_addr #0 {
entry:
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup3, %entry
  %indvars.iv20 = phi i64 [ 0, %entry ], [ %indvars.iv.next21, %for.cond.cleanup3 ]
  %s.017 = phi i32 [ 0, %entry ], [ %add.3.lcssa, %for.cond.cleanup3 ]
  br label %for.body4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup3
  %add.3.lcssa.lcssa = phi i32 [ %add.3.lcssa, %for.cond.cleanup3 ]
  ret i32 %add.3.lcssa.lcssa

for.cond.cleanup3:                                ; preds = %for.body4
  %add.3.lcssa = phi i32 [ %add.3, %for.body4 ]
  %indvars.iv.next21 = add nuw nsw i64 %indvars.iv20, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next21, 256
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond1.preheader, !llvm.loop !5

for.body4:                                        ; preds = %for.body4, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next.3, %for.body4 ]
  %s.115 = phi i32 [ %s.017, %for.cond1.preheader ], [ %add.3, %for.body4 ]
  %arrayidx6 = getelementptr inbounds [256 x i32], ptr %a, i64 %indvars.iv20, i64 %indvars.iv
  %i = load i32, ptr %arrayidx6, align 4, !tbaa !8
  %add = add nsw i32 %i, %s.115
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx6.1 = getelementptr inbounds [256 x i32], ptr %a, i64 %indvars.iv20, i64 %indvars.iv.next
  %i1 = load i32, ptr %arrayidx6.1, align 4, !tbaa !8
  %add.1 = add nsw i32 %i1, %add
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx6.2 = getelementptr inbounds [256 x i32], ptr %a, i64 %indvars.iv20, i64 %indvars.iv.next.1
  %i2 = load i32, ptr %arrayidx6.2, align 4, !tbaa !8
  %add.2 = add nsw i32 %i2, %add.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx6.3 = getelementptr inbounds [256 x i32], ptr %a, i64 %indvars.iv20, i64 %indvars.iv.next.2
  %i3 = load i32, ptr %arrayidx6.3, align 4, !tbaa !8
  %add.3 = add nsw i32 %i3, %add.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %exitcond.3.not = icmp eq i64 %indvars.iv.next.3, 256
  br i1 %exitcond.3.not, label %for.cond.cleanup3, label %for.body4, !llvm.loop !12
}

attributes #0 = { argmemonly nofree norecurse nosync nounwind readonly ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 12f9c7b27063a4a487621f48c167e4f88de6d297)"}
!5 = distinct !{!5, !6, !7}
!6 = !{!"llvm.loop.mustprogress"}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = distinct !{!12, !6, !7}
