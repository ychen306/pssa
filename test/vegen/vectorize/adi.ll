; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp,gvn,simplifycfg | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@d = external global [1 x [1 x [3 x [5 x i32]]]]

define i32 @adi(i1 %c) {
; CHECK-LABEL: @adi(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[HEADER:%.*]]
; CHECK:       header:
; CHECK-NEXT:    [[ACTIVE_MU_VEC:%.*]] = phi <2 x i1> [ <i1 true, i1 true>, [[ENTRY:%.*]] ], [ [[TMP2:%.*]], [[LATCH:%.*]] ]
; CHECK-NEXT:    [[ACTIVE_MU_VEC_:%.*]] = select i1 [[C:%.*]], <2 x i1> [[ACTIVE_MU_VEC]], <2 x i1> zeroinitializer
; CHECK-NEXT:    [[TMP0:%.*]] = call i1 @llvm.vector.reduce.or.v2i1(<2 x i1> [[ACTIVE_MU_VEC_]])
; CHECK-NEXT:    br i1 [[TMP0]], label [[HEADER3:%.*]], label [[LATCH]]
; CHECK:       exit:
; CHECK-NEXT:    ret i32 0
; CHECK:       header3:
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <2 x i1> [[ACTIVE_MU_VEC]], <2 x i1> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0(<4 x i32> <i32 0, i32 1, i32 2, i32 3>, ptr getelementptr inbounds ([1 x [1 x [3 x [5 x i32]]]], ptr @d, i64 2, i64 0, i64 0, i64 1, i64 2), i32 4, <4 x i1> [[TMP1]])
; CHECK-NEXT:    br label [[LATCH]]
; CHECK:       latch:
; CHECK-NEXT:    [[TMP2]] = and <2 x i1> <i1 false, i1 true>, [[ACTIVE_MU_VEC]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i1 @llvm.vector.reduce.or.v2i1(<2 x i1> [[TMP2]])
; CHECK-NEXT:    br i1 [[TMP3]], label [[HEADER]], label [[EXIT:%.*]]
;
for.cond2.preheader.lr.ph:
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc22, %for.cond2.preheader.lr.ph
  br i1 %c, label %for.cond7.preheader.preheader, label %for.inc22

for.cond7.preheader.preheader:                    ; preds = %for.cond2.preheader
  br label %for.cond7.preheader

for.cond.for.cond25.preheader_crit_edge:          ; preds = %for.inc22
  br label %for.cond29.preheader.lr.ph

for.cond29.preheader.lr.ph:                       ; preds = %for.cond.for.cond25.preheader_crit_edge
  br label %for.cond29.preheader

for.cond7.preheader:                              ; preds = %for.cond7.preheader, %for.cond7.preheader.preheader
  store i32 0, ptr getelementptr inbounds ([1 x [1 x [3 x [5 x i32]]]], ptr @d, i64 2, i64 0, i64 0, i64 1, i64 2), align 4
  store i32 1, ptr getelementptr inbounds ([1 x [1 x [3 x [5 x i32]]]], ptr @d, i64 2, i64 0, i64 0, i64 1, i64 3), align 4
  store i32 2, ptr getelementptr inbounds ([1 x [1 x [3 x [5 x i32]]]], ptr @d, i64 2, i64 0, i64 0, i64 1, i64 4), align 4
  br i1 false, label %for.cond7.preheader, label %for.inc22.loopexit

for.inc22.loopexit:                               ; preds = %for.cond7.preheader
  br label %for.inc22

for.inc22:                                        ; preds = %for.inc22.loopexit, %for.cond2.preheader
  br i1 false, label %for.cond2.preheader, label %for.cond.for.cond25.preheader_crit_edge

for.cond29.preheader:                             ; preds = %for.inc62, %for.cond29.preheader.lr.ph
  br i1 %c, label %for.cond34.preheader.preheader, label %for.inc62

for.cond34.preheader.preheader:                   ; preds = %for.cond29.preheader
  br label %for.cond34.preheader

for.cond34.preheader:                             ; preds = %for.cond34.preheader, %for.cond34.preheader.preheader
  store i32 3, ptr getelementptr inbounds ([1 x [1 x [3 x [5 x i32]]]], ptr @d, i64 2, i64 0, i64 0, i64 2, i64 0), align 4
  br i1 false, label %for.cond34.preheader, label %for.inc62.loopexit

for.inc62.loopexit:                               ; preds = %for.cond34.preheader
  br label %for.inc62

for.inc62:                                        ; preds = %for.inc62.loopexit, %for.cond29.preheader
  br i1 false, label %for.cond25.for.end64_crit_edge, label %for.cond29.preheader

for.cond25.for.end64_crit_edge:                   ; preds = %for.inc62
  ret i32 0
}
