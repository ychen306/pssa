; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp | FileCheck %s
; ModuleID = 's271.c'
source_filename = "s271.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@b = local_unnamed_addr global [4 x float] zeroinitializer, align 16
@c = local_unnamed_addr global [4 x float] zeroinitializer, align 16
@a = local_unnamed_addr global [4 x float] zeroinitializer, align 16

; Function Attrs: nofree norecurse nosync nounwind ssp uwtable
define void @vif() local_unnamed_addr #0 {
; CHECK-LABEL: @vif(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTVEC:%.*]] = load <4 x float>, ptr @b, align 16
; CHECK-NEXT:    [[CMP1_1_VEC:%.*]] = fcmp ogt <4 x float> [[DOTVEC]], zeroinitializer
; CHECK-NEXT:    [[TMP0:%.*]] = call <4 x float> @llvm.masked.load.v4f32.p0(ptr @c, i32 16, <4 x i1> [[CMP1_1_VEC]], <4 x float> undef)
; CHECK-NEXT:    [[MUL_1_VEC:%.*]] = fmul <4 x float> [[TMP0]], [[DOTVEC]]
; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x float> @llvm.masked.load.v4f32.p0(ptr @a, i32 16, <4 x i1> [[CMP1_1_VEC]], <4 x float> undef)
; CHECK-NEXT:    [[ADD_1_VEC:%.*]] = fadd <4 x float> [[TMP1]], [[MUL_1_VEC]]
; CHECK-NEXT:    call void @llvm.masked.store.v4f32.p0(<4 x float> [[ADD_1_VEC]], ptr @a, i32 16, <4 x i1> [[CMP1_1_VEC]])
; CHECK-NEXT:    ret void
;
entry:
  %0 = load float, ptr @b, align 16, !tbaa !5
  %cmp1 = fcmp fast ogt float %0, 0.000000e+00
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %entry
  %1 = load float, ptr @c, align 16, !tbaa !5
  %mul = fmul fast float %1, %0
  %2 = load float, ptr @a, align 16, !tbaa !5
  %add = fadd fast float %2, %mul
  store float %add, ptr @a, align 16, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %entry, %if.then
  %3 = load float, ptr getelementptr inbounds ([4 x float], ptr @b, i64 0, i64 1), align 4, !tbaa !5
  %cmp1.1 = fcmp fast ogt float %3, 0.000000e+00
  br i1 %cmp1.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %4 = load float, ptr getelementptr inbounds ([4 x float], ptr @c, i64 0, i64 1), align 4, !tbaa !5
  %mul.1 = fmul fast float %4, %3
  %5 = load float, ptr getelementptr inbounds ([4 x float], ptr @a, i64 0, i64 1), align 4, !tbaa !5
  %add.1 = fadd fast float %5, %mul.1
  store float %add.1, ptr getelementptr inbounds ([4 x float], ptr @a, i64 0, i64 1), align 4, !tbaa !5
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %6 = load float, ptr getelementptr inbounds ([4 x float], ptr @b, i64 0, i64 2), align 8, !tbaa !5
  %cmp1.2 = fcmp fast ogt float %6, 0.000000e+00
  br i1 %cmp1.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %7 = load float, ptr getelementptr inbounds ([4 x float], ptr @c, i64 0, i64 2), align 8, !tbaa !5
  %mul.2 = fmul fast float %7, %6
  %8 = load float, ptr getelementptr inbounds ([4 x float], ptr @a, i64 0, i64 2), align 8, !tbaa !5
  %add.2 = fadd fast float %8, %mul.2
  store float %add.2, ptr getelementptr inbounds ([4 x float], ptr @a, i64 0, i64 2), align 8, !tbaa !5
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %9 = load float, ptr getelementptr inbounds ([4 x float], ptr @b, i64 0, i64 3), align 4, !tbaa !5
  %cmp1.3 = fcmp fast ogt float %9, 0.000000e+00
  br i1 %cmp1.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %10 = load float, ptr getelementptr inbounds ([4 x float], ptr @c, i64 0, i64 3), align 4, !tbaa !5
  %mul.3 = fmul fast float %10, %9
  %11 = load float, ptr getelementptr inbounds ([4 x float], ptr @a, i64 0, i64 3), align 4, !tbaa !5
  %add.3 = fadd fast float %11, %mul.3
  store float %add.3, ptr getelementptr inbounds ([4 x float], ptr @a, i64 0, i64 3), align 4, !tbaa !5
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  ret void
}

attributes #0 = { nofree norecurse nosync nounwind ssp uwtable "approx-func-fp-math"="true" "frame-pointer"="all" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 12f9c7b27063a4a487621f48c167e4f88de6d297)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
