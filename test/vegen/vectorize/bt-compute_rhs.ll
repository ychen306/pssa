; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=global-slp,adce,simplifycfg | FileCheck %s
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@b = external global [1 x [1 x [3 x [5 x i32]]]]

define i32 @compute_rhs() {
; CHECK-LABEL: @compute_rhs(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = xor i1 false, true
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <2 x i1> undef, i1 false, i64 0
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i1> [[TMP1]], i1 [[TMP0]], i64 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i1 false, true
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i1> undef, i1 [[TMP3]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x i1> [[TMP4]], i1 false, i64 1
; CHECK-NEXT:    [[TMP6:%.*]] = call i1 @llvm.vector.reduce.or.v2i1(<2 x i1> [[TMP5]])
; CHECK-NEXT:    br i1 [[TMP6]], label [[HEADER:%.*]], label [[EXIT:%.*]]
; CHECK:       header:
; CHECK-NEXT:    [[DOTMEM_0:%.*]] = phi <2 x i1> [ [[DOTMEM_1:%.*]], [[LATCH:%.*]] ], [ undef, [[ENTRY:%.*]] ]
; CHECK-NEXT:    [[ACTIVE_MU_VEC:%.*]] = phi <2 x i1> [ [[TMP15:%.*]], [[LATCH]] ], [ [[TMP2]], [[ENTRY]] ]
; CHECK-NEXT:    [[INDVARS_IV107:%.*]] = phi i64 [ [[INDVARS_IV_NEXT108:%.*]], [[LATCH]] ], [ 1, [[ENTRY]] ]
; CHECK-NEXT:    [[TMP7:%.*]] = call i1 @llvm.vector.reduce.or.v2i1(<2 x i1> [[ACTIVE_MU_VEC]])
; CHECK-NEXT:    br i1 [[TMP7]], label [[HEADER3:%.*]], label [[LATCH]]
; CHECK:       header3:
; CHECK-NEXT:    [[ACTIVE_MU_VEC7:%.*]] = phi <2 x i1> [ [[TMP12:%.*]], [[HEADER3]] ], [ [[ACTIVE_MU_VEC]], [[HEADER]] ]
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[HEADER3]] ], [ 1, [[HEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX14_US_4:%.*]] = getelementptr inbounds [0 x [1 x [3 x [5 x i32]]]], ptr @b, i64 0, i64 [[INDVARS_IV107]], i64 [[INDVARS_IV]], i64 1, i64 4
; CHECK-NEXT:    [[TMP8:%.*]] = shufflevector <2 x i1> [[ACTIVE_MU_VEC7]], <2 x i1> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0(<4 x i32> zeroinitializer, ptr [[ARRAYIDX14_US_4]], i32 4, <4 x i1> [[TMP8]])
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 0, 0
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <2 x i1> undef, i1 [[EXITCOND_NOT]], i64 0
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <2 x i1> [[TMP9]], i1 false, i64 1
; CHECK-NEXT:    [[TMP11:%.*]] = xor <2 x i1> [[TMP10]], <i1 true, i1 true>
; CHECK-NEXT:    [[TMP12]] = and <2 x i1> [[TMP11]], [[ACTIVE_MU_VEC7]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[TMP13:%.*]] = call i1 @llvm.vector.reduce.or.v2i1(<2 x i1> [[TMP12]])
; CHECK-NEXT:    br i1 [[TMP13]], label [[HEADER3]], label [[LATCH]]
; CHECK:       latch:
; CHECK-NEXT:    [[DOTMEM_1]] = phi <2 x i1> [ [[DOTMEM_0]], [[HEADER]] ], [ [[TMP11]], [[HEADER3]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = shufflevector <2 x i1> [[DOTMEM_1]], <2 x i1> undef, <2 x i32> <i32 1, i32 1>
; CHECK-NEXT:    [[TMP15]] = and <2 x i1> [[TMP14]], [[ACTIVE_MU_VEC]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT108]] = add nuw nsw i64 [[INDVARS_IV107]], 1
; CHECK-NEXT:    [[TMP16:%.*]] = call i1 @llvm.vector.reduce.or.v2i1(<2 x i1> [[TMP15]])
; CHECK-NEXT:    br i1 [[TMP16]], label [[HEADER]], label [[EXIT]]
; CHECK:       exit:
; CHECK-NEXT:    ret i32 0
;
entry:
  br i1 false, label %for.cond3.preheader.lr.ph, label %for.cond33.preheader

for.cond3.preheader.lr.ph:                        ; preds = %entry
  br i1 false, label %for.cond3.preheader.us.preheader, label %for.end73.sink.split

for.cond3.preheader.us.preheader:                 ; preds = %for.cond3.preheader.lr.ph
  br label %for.cond3.preheader.us

for.cond3.preheader.us:                           ; preds = %for.cond3.for.inc30_crit_edge.us, %for.cond3.preheader.us.preheader
  %indvars.iv107 = phi i64 [ 1, %for.cond3.preheader.us.preheader ], [ %indvars.iv.next108, %for.cond3.for.inc30_crit_edge.us ]
  br label %for.cond7.preheader.us

for.cond7.preheader.us:                           ; preds = %for.cond7.preheader.us, %for.cond3.preheader.us
  %indvars.iv = phi i64 [ 1, %for.cond3.preheader.us ], [ %indvars.iv.next, %for.cond7.preheader.us ]
  %arrayidx14.us.4 = getelementptr inbounds [0 x [1 x [3 x [5 x i32]]]], ptr @b, i64 0, i64 %indvars.iv107, i64 %indvars.iv, i64 1, i64 4
  store i32 0, ptr %arrayidx14.us.4, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 0, 0
  br i1 %exitcond.not, label %for.cond3.for.inc30_crit_edge.us, label %for.cond7.preheader.us

for.cond3.for.inc30_crit_edge.us:                 ; preds = %for.cond7.preheader.us
  %indvars.iv.next108 = add nuw nsw i64 %indvars.iv107, 1
  br i1 false, label %for.end73.sink.split.loopexit, label %for.cond3.preheader.us

for.cond33.preheader:                             ; preds = %entry
  br label %for.cond38.preheader.us.preheader

for.cond38.preheader.us.preheader:                ; preds = %for.cond33.preheader
  br label %for.cond38.preheader.us

for.cond38.preheader.us:                          ; preds = %for.cond38.for.inc71_crit_edge.us, %for.cond38.preheader.us.preheader
  %indvars.iv121 = phi i64 [ 1, %for.cond38.preheader.us.preheader ], [ %indvars.iv.next122, %for.cond38.for.inc71_crit_edge.us ]
  br label %for.cond43.preheader.us

for.cond43.preheader.us:                          ; preds = %for.cond43.preheader.us, %for.cond38.preheader.us
  %indvars.iv116 = phi i64 [ 1, %for.cond38.preheader.us ], [ %indvars.iv.next117, %for.cond43.preheader.us ]
  %arrayidx53.us = getelementptr inbounds [0 x [1 x [3 x [5 x i32]]]], ptr @b, i64 0, i64 %indvars.iv121, i64 %indvars.iv116, i64 2, i64 0
  store i32 0, ptr %arrayidx53.us, align 4
  %arrayidx53.us.1 = getelementptr inbounds [0 x [1 x [3 x [5 x i32]]]], ptr @b, i64 0, i64 %indvars.iv121, i64 %indvars.iv116, i64 2, i64 1
  store i32 0, ptr %arrayidx53.us.1, align 4
  %arrayidx53.us.2 = getelementptr inbounds [0 x [1 x [3 x [5 x i32]]]], ptr @b, i64 0, i64 %indvars.iv121, i64 %indvars.iv116, i64 2, i64 2
  store i32 0, ptr %arrayidx53.us.2, align 4
  %indvars.iv.next117 = add nuw nsw i64 %indvars.iv116, 1
  br i1 false, label %for.cond38.for.inc71_crit_edge.us, label %for.cond43.preheader.us

for.cond38.for.inc71_crit_edge.us:                ; preds = %for.cond43.preheader.us
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  br i1 false, label %for.end73.sink.split.loopexit128, label %for.cond38.preheader.us

for.end73.sink.split.loopexit:                    ; preds = %for.cond3.for.inc30_crit_edge.us
  br label %for.end73.sink.split

for.end73.sink.split.loopexit128:                 ; preds = %for.cond38.for.inc71_crit_edge.us
  br label %for.end73.sink.split

for.end73.sink.split:                             ; preds = %for.end73.sink.split.loopexit128, %for.end73.sink.split.loopexit, %for.cond3.preheader.lr.ph
  ret i32 0
}
