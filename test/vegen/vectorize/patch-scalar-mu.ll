; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt -passes=global-slp %s -S | FileCheck %s

target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@a = local_unnamed_addr global [1030 x float] zeroinitializer, align 16

; Function Attrs: nofree norecurse nosync nounwind ssp writeonly uwtable
define void @main() local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[INDVARS_IV_NEXT_4:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[INDVARS_IV_NEXT:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[TMP0:%.*]] = trunc i64 [[INDVARS_IV_NEXT]] to i32
; CHECK-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    store float [[CONV]], ptr [[ARRAYIDX]], align 4, !tbaa [[TBAA5:![0-9]+]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_1:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 2
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i64 [[INDVARS_IV_NEXT_1]] to i32
; CHECK-NEXT:    [[CONV_1:%.*]] = sitofp i32 [[TMP1]] to float
; CHECK-NEXT:    [[ARRAYIDX_1:%.*]] = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    store float [[CONV_1]], ptr [[ARRAYIDX_1]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_2:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 3
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[INDVARS_IV_NEXT_2]] to i32
; CHECK-NEXT:    [[CONV_2:%.*]] = sitofp i32 [[TMP2]] to float
; CHECK-NEXT:    [[ARRAYIDX_2:%.*]] = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_1]]
; CHECK-NEXT:    store float [[CONV_2]], ptr [[ARRAYIDX_2]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_3:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 4
; CHECK-NEXT:    [[TMP3:%.*]] = trunc i64 [[INDVARS_IV_NEXT_3]] to i32
; CHECK-NEXT:    [[CONV_3:%.*]] = sitofp i32 [[TMP3]] to float
; CHECK-NEXT:    [[ARRAYIDX_3:%.*]] = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_2]]
; CHECK-NEXT:    store float [[CONV_3]], ptr [[ARRAYIDX_3]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_4]] = add nuw nsw i64 [[INDVARS_IV]], 5
; CHECK-NEXT:    [[TMP4:%.*]] = trunc i64 [[INDVARS_IV_NEXT_4]] to i32
; CHECK-NEXT:    [[CONV_4:%.*]] = sitofp i32 [[TMP4]] to float
; CHECK-NEXT:    [[ARRAYIDX_4:%.*]] = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_3]]
; CHECK-NEXT:    store float [[CONV_4]], ptr [[ARRAYIDX_4]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[EXITCOND_NOT_4:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT_4]], 1030
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_4]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP9:![0-9]+]]
;

entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.4, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %0 = trunc i64 %indvars.iv.next to i32
  %conv = sitofp i32 %0 to float
  %arrayidx = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 %indvars.iv
  store float %conv, ptr %arrayidx, align 4, !tbaa !5
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %1 = trunc i64 %indvars.iv.next.1 to i32
  %conv.1 = sitofp i32 %1 to float
  %arrayidx.1 = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 %indvars.iv.next
  store float %conv.1, ptr %arrayidx.1, align 4, !tbaa !5
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %2 = trunc i64 %indvars.iv.next.2 to i32
  %conv.2 = sitofp i32 %2 to float
  %arrayidx.2 = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 %indvars.iv.next.1
  store float %conv.2, ptr %arrayidx.2, align 4, !tbaa !5
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %3 = trunc i64 %indvars.iv.next.3 to i32
  %conv.3 = sitofp i32 %3 to float
  %arrayidx.3 = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 %indvars.iv.next.2
  store float %conv.3, ptr %arrayidx.3, align 4, !tbaa !5
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %4 = trunc i64 %indvars.iv.next.4 to i32
  %conv.4 = sitofp i32 %4 to float
  %arrayidx.4 = getelementptr inbounds [1030 x float], ptr @a, i64 0, i64 %indvars.iv.next.3
  store float %conv.4, ptr %arrayidx.4, align 4, !tbaa !5
  %exitcond.not.4 = icmp eq i64 %indvars.iv.next.4, 1030
  br i1 %exitcond.not.4, label %for.cond.cleanup, label %for.body, !llvm.loop !9
}

attributes #0 = { nofree norecurse nosync nounwind ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="icelake-client" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+cmov,+crc32,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512er,-avx512fp16,-avx512pf,-avx512vp2intersect,-avxvnni,-cldemote,-clwb,-clzero,-enqcmd,-fma4,-hreset,-kl,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpru,-rtm,-serialize,-shstk,-sse4a,-tbm,-tsxldtrk,-uintr,-waitpkg,-wbnoinvd,-widekl,-xop" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 12f9c7b27063a4a487621f48c167e4f88de6d297)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
