; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -load-pass-plugin /Users/tom/workspace/pssa/build/lib/libPSSA.so %s -S -passes=global-slp,adce,simplifycfg | FileCheck %s
; ModuleID = 's274.c'
source_filename = "s274.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@c = local_unnamed_addr global [32000 x float] zeroinitializer, align 16
@e = local_unnamed_addr global [32000 x float] zeroinitializer, align 16
@d = local_unnamed_addr global [32000 x float] zeroinitializer, align 16
@a = local_unnamed_addr global [32000 x float] zeroinitializer, align 16
@b = local_unnamed_addr global [32000 x float] zeroinitializer, align 16

; Function Attrs: nofree norecurse nosync nounwind ssp uwtable
define void @s278() local_unnamed_addr #0 {
; CHECK-LABEL: @s278(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[HEADER:%.*]]
; CHECK:       header:
; CHECK-DAG:    [[NITER:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NITER_NEXT_7:%.*]], [[HEADER]] ]
; CHECK-DAG:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[ENTRY]] ], [ [[INDVARS_IV_NEXT_7:%.*]], [[HEADER]] ]
; CHECK-DAG:    [[ARRAYIDX:%.*]] = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 [[INDVARS_IV]]
; CHECK-DAG:    [[INDVARS_IV_NEXT:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-DAG:    [[INDVARS_IV_NEXT_1:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT]], 1
; CHECK-DAG:    [[INDVARS_IV_NEXT_2:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_1]], 1
; CHECK-DAG:    [[INDVARS_IV_NEXT_3:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_2]], 1
; CHECK-DAG:    [[INDVARS_IV_NEXT_4:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_3]], 1
; CHECK-DAG:    [[INDVARS_IV_NEXT_5:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_4]], 1
; CHECK-DAG:    [[INDVARS_IV_NEXT_6:%.*]] = add nuw nsw i64 [[INDVARS_IV_NEXT_5]], 1
; CHECK-NEXT:    [[DOTVEC:%.*]] = load <8 x float>, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[DOTVEC1:%.*]] = load <8 x float>, ptr [[ARRAYIDX2]], align 4
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[DOTVEC2:%.*]] = load <8 x float>, ptr [[ARRAYIDX4]], align 4
; CHECK-NEXT:    [[MUL_1_VEC:%.*]] = fmul <8 x float> [[DOTVEC2]], [[DOTVEC1]]
; CHECK-NEXT:    [[ADD_1_VEC:%.*]] = fadd <8 x float> [[MUL_1_VEC]], [[DOTVEC]]
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    store <8 x float> [[ADD_1_VEC]], ptr [[ARRAYIDX6]], align 4
; CHECK-NEXT:    [[CMP9_1_VEC:%.*]] = fcmp ogt <8 x float> [[ADD_1_VEC]], zeroinitializer
; CHECK-NEXT:    [[TMP0:%.*]] = xor <8 x i1> [[CMP9_1_VEC]], <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
; CHECK-NEXT:    call void @llvm.masked.store.v8f32.p0(<8 x float> [[MUL_1_VEC]], ptr [[ARRAYIDX6]], i32 4, <8 x i1> [[TMP0]])
; CHECK-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[DOTVEC3:%.*]] = load <8 x float>, ptr [[ARRAYIDX13]], align 4
; CHECK-NEXT:    [[ADD14_1_VEC:%.*]] = fadd <8 x float> [[DOTVEC3]], [[ADD_1_VEC]]
; CHECK-NEXT:    call void @llvm.masked.store.v8f32.p0(<8 x float> [[ADD14_1_VEC]], ptr [[ARRAYIDX13]], i32 4, <8 x i1> [[CMP9_1_VEC]])
; CHECK-NEXT:    [[NITER_NEXT:%.*]] = add nuw nsw i64 [[NITER]], 1
; CHECK-NEXT:    [[NITER_NEXT_1:%.*]] = add nuw nsw i64 [[NITER_NEXT]], 1
; CHECK-NEXT:    [[NITER_NEXT_2:%.*]] = add nuw nsw i64 [[NITER_NEXT_1]], 1
; CHECK-NEXT:    [[NITER_NEXT_3:%.*]] = add nuw nsw i64 [[NITER_NEXT_2]], 1
; CHECK-NEXT:    [[NITER_NEXT_4:%.*]] = add nuw nsw i64 [[NITER_NEXT_3]], 1
; CHECK-NEXT:    [[NITER_NEXT_5:%.*]] = add nuw nsw i64 [[NITER_NEXT_4]], 1
; CHECK-NEXT:    [[NITER_NEXT_6:%.*]] = add nuw nsw i64 [[NITER_NEXT_5]], 1
; CHECK-NEXT:    [[INDVARS_IV_NEXT_7]] = add nuw nsw i64 [[INDVARS_IV_NEXT_6]], 1
; CHECK-NEXT:    [[NITER_NEXT_7]] = add nuw nsw i64 [[NITER_NEXT_6]], 1
; CHECK-NEXT:    [[NITER_NCMP_7:%.*]] = icmp eq i64 [[NITER_NEXT_7]], 32000
; CHECK-NEXT:    [[SHOULD_CONTINUE_MEM_0:%.*]] = select i1 [[NITER_NCMP_7]], i1 false, i1 true
; CHECK-NEXT:    br i1 [[SHOULD_CONTINUE_MEM_0]], label [[HEADER]], label [[EXIT:%.*]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
entry:
  br i1 false, label %for.cond.cleanup.unr-lcssa, label %entry.new

entry.new:                                        ; preds = %entry
  br label %for.body

for.cond.cleanup.unr-lcssa.loopexit:              ; preds = %for.inc.7
  %indvars.iv.unr.ph = phi i64 [ %indvars.iv.next.7, %for.inc.7 ]
  br label %for.cond.cleanup.unr-lcssa

for.cond.cleanup.unr-lcssa:                       ; preds = %for.cond.cleanup.unr-lcssa.loopexit, %entry
  %indvars.iv.unr = phi i64 [ 0, %entry ], [ %indvars.iv.unr.ph, %for.cond.cleanup.unr-lcssa.loopexit ]
  br i1 false, label %for.body.epil.preheader, label %for.cond.cleanup

for.body.epil.preheader:                          ; preds = %for.cond.cleanup.unr-lcssa
  br label %for.body.epil

for.body.epil:                                    ; preds = %for.inc.epil, %for.body.epil.preheader
  %indvars.iv.epil = phi i64 [ %indvars.iv.unr, %for.body.epil.preheader ], [ %indvars.iv.next.epil, %for.inc.epil ]
  %epil.iter = phi i64 [ 0, %for.body.epil.preheader ], [ %epil.iter.next, %for.inc.epil ]
  %arrayidx.epil = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 %indvars.iv.epil
  %0 = load float, ptr %arrayidx.epil, align 4, !tbaa !5
  %arrayidx2.epil = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 %indvars.iv.epil
  %1 = load float, ptr %arrayidx2.epil, align 4, !tbaa !5
  %arrayidx4.epil = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 %indvars.iv.epil
  %2 = load float, ptr %arrayidx4.epil, align 4, !tbaa !5
  %mul.epil = fmul fast float %2, %1
  %add.epil = fadd fast float %mul.epil, %0
  %arrayidx6.epil = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 %indvars.iv.epil
  store float %add.epil, ptr %arrayidx6.epil, align 4, !tbaa !5
  %cmp9.epil = fcmp fast ogt float %add.epil, 0.000000e+00
  br i1 %cmp9.epil, label %if.then.epil, label %if.else.epil

if.else.epil:                                     ; preds = %for.body.epil
  store float %mul.epil, ptr %arrayidx6.epil, align 4, !tbaa !5
  br label %for.inc.epil

if.then.epil:                                     ; preds = %for.body.epil
  %arrayidx13.epil = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 %indvars.iv.epil
  %3 = load float, ptr %arrayidx13.epil, align 4, !tbaa !5
  %add14.epil = fadd fast float %3, %add.epil
  store float %add14.epil, ptr %arrayidx13.epil, align 4, !tbaa !5
  br label %for.inc.epil

for.inc.epil:                                     ; preds = %if.then.epil, %if.else.epil
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %exitcond.not.epil = icmp eq i64 %indvars.iv.next.epil, 32000
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp = icmp ne i64 %epil.iter.next, 0
  br i1 %epil.iter.cmp, label %for.body.epil, label %for.cond.cleanup.epilog-lcssa, !llvm.loop !9

for.cond.cleanup.epilog-lcssa:                    ; preds = %for.inc.epil
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.unr-lcssa, %for.cond.cleanup.epilog-lcssa
  ret void

for.body:                                         ; preds = %for.inc.7, %entry.new
  %indvars.iv = phi i64 [ 0, %entry.new ], [ %indvars.iv.next.7, %for.inc.7 ]
  %niter = phi i64 [ 0, %entry.new ], [ %niter.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 %indvars.iv
  %4 = load float, ptr %arrayidx, align 4, !tbaa !5
  %arrayidx2 = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 %indvars.iv
  %5 = load float, ptr %arrayidx2, align 4, !tbaa !5
  %arrayidx4 = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 %indvars.iv
  %6 = load float, ptr %arrayidx4, align 4, !tbaa !5
  %mul = fmul fast float %6, %5
  %add = fadd fast float %mul, %4
  %arrayidx6 = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 %indvars.iv
  store float %add, ptr %arrayidx6, align 4, !tbaa !5
  %cmp9 = fcmp fast ogt float %add, 0.000000e+00
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %arrayidx13 = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 %indvars.iv
  %7 = load float, ptr %arrayidx13, align 4, !tbaa !5
  %add14 = fadd fast float %7, %add
  store float %add14, ptr %arrayidx13, align 4, !tbaa !5
  br label %for.inc

if.else:                                          ; preds = %for.body
  store float %mul, ptr %arrayidx6, align 4, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %niter.next = add nuw nsw i64 %niter, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 %indvars.iv.next
  %8 = load float, ptr %arrayidx.1, align 4, !tbaa !5
  %arrayidx2.1 = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 %indvars.iv.next
  %9 = load float, ptr %arrayidx2.1, align 4, !tbaa !5
  %arrayidx4.1 = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 %indvars.iv.next
  %10 = load float, ptr %arrayidx4.1, align 4, !tbaa !5
  %mul.1 = fmul fast float %10, %9
  %add.1 = fadd fast float %mul.1, %8
  %arrayidx6.1 = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 %indvars.iv.next
  store float %add.1, ptr %arrayidx6.1, align 4, !tbaa !5
  %cmp9.1 = fcmp fast ogt float %add.1, 0.000000e+00
  br i1 %cmp9.1, label %if.then.1, label %if.else.1

if.else.1:                                        ; preds = %for.inc
  store float %mul.1, ptr %arrayidx6.1, align 4, !tbaa !5
  br label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx13.1 = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 %indvars.iv.next
  %11 = load float, ptr %arrayidx13.1, align 4, !tbaa !5
  %add14.1 = fadd fast float %11, %add.1
  store float %add14.1, ptr %arrayidx13.1, align 4, !tbaa !5
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %if.else.1
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next, 1
  %niter.next.1 = add nuw nsw i64 %niter.next, 1
  %arrayidx.2 = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 %indvars.iv.next.1
  %12 = load float, ptr %arrayidx.2, align 4, !tbaa !5
  %arrayidx2.2 = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 %indvars.iv.next.1
  %13 = load float, ptr %arrayidx2.2, align 4, !tbaa !5
  %arrayidx4.2 = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 %indvars.iv.next.1
  %14 = load float, ptr %arrayidx4.2, align 4, !tbaa !5
  %mul.2 = fmul fast float %14, %13
  %add.2 = fadd fast float %mul.2, %12
  %arrayidx6.2 = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, ptr %arrayidx6.2, align 4, !tbaa !5
  %cmp9.2 = fcmp fast ogt float %add.2, 0.000000e+00
  br i1 %cmp9.2, label %if.then.2, label %if.else.2

if.else.2:                                        ; preds = %for.inc.1
  store float %mul.2, ptr %arrayidx6.2, align 4, !tbaa !5
  br label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx13.2 = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 %indvars.iv.next.1
  %15 = load float, ptr %arrayidx13.2, align 4, !tbaa !5
  %add14.2 = fadd fast float %15, %add.2
  store float %add14.2, ptr %arrayidx13.2, align 4, !tbaa !5
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %if.else.2
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.next.1, 1
  %niter.next.2 = add nuw nsw i64 %niter.next.1, 1
  %arrayidx.3 = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 %indvars.iv.next.2
  %16 = load float, ptr %arrayidx.3, align 4, !tbaa !5
  %arrayidx2.3 = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 %indvars.iv.next.2
  %17 = load float, ptr %arrayidx2.3, align 4, !tbaa !5
  %arrayidx4.3 = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 %indvars.iv.next.2
  %18 = load float, ptr %arrayidx4.3, align 4, !tbaa !5
  %mul.3 = fmul fast float %18, %17
  %add.3 = fadd fast float %mul.3, %16
  %arrayidx6.3 = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, ptr %arrayidx6.3, align 4, !tbaa !5
  %cmp9.3 = fcmp fast ogt float %add.3, 0.000000e+00
  br i1 %cmp9.3, label %if.then.3, label %if.else.3

if.else.3:                                        ; preds = %for.inc.2
  store float %mul.3, ptr %arrayidx6.3, align 4, !tbaa !5
  br label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx13.3 = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 %indvars.iv.next.2
  %19 = load float, ptr %arrayidx13.3, align 4, !tbaa !5
  %add14.3 = fadd fast float %19, %add.3
  store float %add14.3, ptr %arrayidx13.3, align 4, !tbaa !5
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %if.else.3
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.next.2, 1
  %niter.next.3 = add nuw nsw i64 %niter.next.2, 1
  %arrayidx.4 = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 %indvars.iv.next.3
  %20 = load float, ptr %arrayidx.4, align 4, !tbaa !5
  %arrayidx2.4 = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 %indvars.iv.next.3
  %21 = load float, ptr %arrayidx2.4, align 4, !tbaa !5
  %arrayidx4.4 = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 %indvars.iv.next.3
  %22 = load float, ptr %arrayidx4.4, align 4, !tbaa !5
  %mul.4 = fmul fast float %22, %21
  %add.4 = fadd fast float %mul.4, %20
  %arrayidx6.4 = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, ptr %arrayidx6.4, align 4, !tbaa !5
  %cmp9.4 = fcmp fast ogt float %add.4, 0.000000e+00
  br i1 %cmp9.4, label %if.then.4, label %if.else.4

if.else.4:                                        ; preds = %for.inc.3
  store float %mul.4, ptr %arrayidx6.4, align 4, !tbaa !5
  br label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx13.4 = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 %indvars.iv.next.3
  %23 = load float, ptr %arrayidx13.4, align 4, !tbaa !5
  %add14.4 = fadd fast float %23, %add.4
  store float %add14.4, ptr %arrayidx13.4, align 4, !tbaa !5
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %if.else.4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv.next.3, 1
  %niter.next.4 = add nuw nsw i64 %niter.next.3, 1
  %arrayidx.5 = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 %indvars.iv.next.4
  %24 = load float, ptr %arrayidx.5, align 4, !tbaa !5
  %arrayidx2.5 = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 %indvars.iv.next.4
  %25 = load float, ptr %arrayidx2.5, align 4, !tbaa !5
  %arrayidx4.5 = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 %indvars.iv.next.4
  %26 = load float, ptr %arrayidx4.5, align 4, !tbaa !5
  %mul.5 = fmul fast float %26, %25
  %add.5 = fadd fast float %mul.5, %24
  %arrayidx6.5 = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, ptr %arrayidx6.5, align 4, !tbaa !5
  %cmp9.5 = fcmp fast ogt float %add.5, 0.000000e+00
  br i1 %cmp9.5, label %if.then.5, label %if.else.5

if.else.5:                                        ; preds = %for.inc.4
  store float %mul.5, ptr %arrayidx6.5, align 4, !tbaa !5
  br label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx13.5 = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 %indvars.iv.next.4
  %27 = load float, ptr %arrayidx13.5, align 4, !tbaa !5
  %add14.5 = fadd fast float %27, %add.5
  store float %add14.5, ptr %arrayidx13.5, align 4, !tbaa !5
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %if.else.5
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv.next.4, 1
  %niter.next.5 = add nuw nsw i64 %niter.next.4, 1
  %arrayidx.6 = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 %indvars.iv.next.5
  %28 = load float, ptr %arrayidx.6, align 4, !tbaa !5
  %arrayidx2.6 = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 %indvars.iv.next.5
  %29 = load float, ptr %arrayidx2.6, align 4, !tbaa !5
  %arrayidx4.6 = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 %indvars.iv.next.5
  %30 = load float, ptr %arrayidx4.6, align 4, !tbaa !5
  %mul.6 = fmul fast float %30, %29
  %add.6 = fadd fast float %mul.6, %28
  %arrayidx6.6 = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, ptr %arrayidx6.6, align 4, !tbaa !5
  %cmp9.6 = fcmp fast ogt float %add.6, 0.000000e+00
  br i1 %cmp9.6, label %if.then.6, label %if.else.6

if.else.6:                                        ; preds = %for.inc.5
  store float %mul.6, ptr %arrayidx6.6, align 4, !tbaa !5
  br label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx13.6 = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 %indvars.iv.next.5
  %31 = load float, ptr %arrayidx13.6, align 4, !tbaa !5
  %add14.6 = fadd fast float %31, %add.6
  store float %add14.6, ptr %arrayidx13.6, align 4, !tbaa !5
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %if.else.6
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv.next.5, 1
  %niter.next.6 = add nuw nsw i64 %niter.next.5, 1
  %arrayidx.7 = getelementptr inbounds [32000 x float], ptr @c, i64 0, i64 %indvars.iv.next.6
  %32 = load float, ptr %arrayidx.7, align 4, !tbaa !5
  %arrayidx2.7 = getelementptr inbounds [32000 x float], ptr @e, i64 0, i64 %indvars.iv.next.6
  %33 = load float, ptr %arrayidx2.7, align 4, !tbaa !5
  %arrayidx4.7 = getelementptr inbounds [32000 x float], ptr @d, i64 0, i64 %indvars.iv.next.6
  %34 = load float, ptr %arrayidx4.7, align 4, !tbaa !5
  %mul.7 = fmul fast float %34, %33
  %add.7 = fadd fast float %mul.7, %32
  %arrayidx6.7 = getelementptr inbounds [32000 x float], ptr @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, ptr %arrayidx6.7, align 4, !tbaa !5
  %cmp9.7 = fcmp fast ogt float %add.7, 0.000000e+00
  br i1 %cmp9.7, label %if.then.7, label %if.else.7

if.else.7:                                        ; preds = %for.inc.6
  store float %mul.7, ptr %arrayidx6.7, align 4, !tbaa !5
  br label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx13.7 = getelementptr inbounds [32000 x float], ptr @b, i64 0, i64 %indvars.iv.next.6
  %35 = load float, ptr %arrayidx13.7, align 4, !tbaa !5
  %add14.7 = fadd fast float %35, %add.7
  store float %add14.7, ptr %arrayidx13.7, align 4, !tbaa !5
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %if.else.7
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv.next.6, 1
  %niter.next.7 = add nuw nsw i64 %niter.next.6, 1
  %niter.ncmp.7 = icmp eq i64 %niter.next.7, 32000
  br i1 %niter.ncmp.7, label %for.cond.cleanup.unr-lcssa.loopexit, label %for.body, !llvm.loop !11
}

attributes #0 = { nofree norecurse nosync nounwind ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="icelake-client" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+clflushopt,+cmov,+crc32,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdpid,+rdrnd,+rdseed,+sahf,+sgx,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512er,-avx512fp16,-avx512pf,-avx512vp2intersect,-avxvnni,-cldemote,-clwb,-clzero,-enqcmd,-fma4,-hreset,-kl,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpru,-rtm,-serialize,-shstk,-sse4a,-tbm,-tsxldtrk,-uintr,-waitpkg,-wbnoinvd,-widekl,-xop" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 2}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 12f9c7b27063a4a487621f48c167e4f88de6d297)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
