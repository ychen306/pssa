; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %opt %s -S -passes=test-vector-codegen,jump-threading,simplifycfg -p i,i2 | FileCheck %s
; ModuleID = 'deepsjeng.ll'
source_filename = "deepsjeng.ll"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

@a = external global [8 x i8]
@c = external global [0 x i32]

define void @_Z18preprocess_preparev() {
; CHECK-LABEL: @_Z18preprocess_preparev(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PIVOT:%.*]] = icmp sge i32 0, 7
; CHECK-NEXT:    [[SWITCHLEAF83:%.*]] = icmp eq i32 0, 7
; CHECK-NEXT:    [[OR_COND:%.*]] = and i1 [[PIVOT]], [[SWITCHLEAF83]]
; CHECK-NEXT:    [[ARRAYIDX_US_US:%.*]] = getelementptr inbounds [0 x i32], ptr @c, i64 0, i64 0
; CHECK-NEXT:    [[PIVOT_1:%.*]] = icmp sge i32 0, 7
; CHECK-NEXT:    [[SWITCHLEAF83_1:%.*]] = icmp eq i32 0, 7
; CHECK-NEXT:    [[OR_COND1:%.*]] = and i1 [[PIVOT_1]], [[SWITCHLEAF83_1]]
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <2 x i1> undef, i1 [[OR_COND]], i64 0
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <2 x i1> [[TMP0]], i1 [[OR_COND1]], i64 1
; CHECK-NEXT:    [[I2_VEC:%.*]] = call <2 x i32> @llvm.masked.load.v2i32.p0(ptr [[ARRAYIDX_US_US]], i32 4, <2 x i1> [[TMP1]], <2 x i32> undef)
; CHECK-NEXT:    [[TMP2:%.*]] = extractelement <2 x i32> [[I2_VEC]], i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i32> [[I2_VEC]], i64 1
; CHECK-NEXT:    [[SPEC_SELECT:%.*]] = select i1 [[OR_COND]], i32 [[TMP2]], i32 0
; CHECK-NEXT:    [[CONV_US_US:%.*]] = trunc i32 [[SPEC_SELECT]] to i8
; CHECK-NEXT:    store i8 [[CONV_US_US]], ptr @a, align 1
; CHECK-NEXT:    [[I3_DEMOTED_0:%.*]] = select i1 [[OR_COND1]], i32 [[TMP3]], i32 0
; CHECK-NEXT:    [[CONV_US_US_1:%.*]] = trunc i32 [[I3_DEMOTED_0]] to i8
; CHECK-NEXT:    store i8 [[CONV_US_US_1]], ptr getelementptr inbounds ([8 x i8], ptr @a, i64 0, i64 1), align 1
; CHECK-NEXT:    ret void
;
for.body2.us.us.preheader.new:
  br label %for.body2.us.us

for.body2.us.us:                                  ; preds = %if.end12.us.us.1, %for.body2.us.us.preheader.new
  %Pivot = icmp sge i32 0, 7
  %SwitchLeaf83 = icmp eq i32 0, 7
  %or.cond = and i1 %Pivot, %SwitchLeaf83
  br i1 %or.cond, label %if.then7.us.us, label %if.end12.us.us

if.then7.us.us:                                   ; preds = %for.body2.us.us
  %arrayidx.us.us = getelementptr inbounds [0 x i32], ptr @c, i64 0, i64 0
  %i = load i32, ptr %arrayidx.us.us, align 4
  br label %if.end12.us.us

if.end12.us.us:                                   ; preds = %for.body2.us.us, %if.then7.us.us
  %i1 = phi i32 [ %i, %if.then7.us.us ], [ 0, %for.body2.us.us ]
  %conv.us.us = trunc i32 %i1 to i8
  store i8 %conv.us.us, ptr @a, align 1
  %Pivot.1 = icmp sge i32 0, 7
  %SwitchLeaf83.1 = icmp eq i32 0, 7
  %or.cond1 = and i1 %Pivot.1, %SwitchLeaf83.1
  br i1 %or.cond1, label %if.then7.us.us.1, label %if.end12.us.us.1

if.then7.us.us.1:                                 ; preds = %if.end12.us.us
  %i2 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @c, i64 0, i64 1), align 4
  br label %if.end12.us.us.1

if.end12.us.us.1:                                 ; preds = %if.end12.us.us, %if.then7.us.us.1
  %i3 = phi i32 [ %i2, %if.then7.us.us.1 ], [ 0, %if.end12.us.us ]
  %conv.us.us.1 = trunc i32 %i3 to i8
  store i8 %conv.us.us.1, ptr getelementptr inbounds ([8 x i8], ptr @a, i64 0, i64 1), align 1
  ret void
}
